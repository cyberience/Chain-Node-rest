{"version":3,"sources":["../../src/crypto/keyPair.js"],"names":["sha3Hasher","require","nacl","arrayUtils","convert","Key_Size","Signature_Size","Half_Signature_Size","Hash_Size","Half_Hash_Size","catapult","hash","func","createHasher","crypto","clamp","d","prepareForScalarMult","sk","hashfunc","Uint8Array","encodedSChecker","Is_Reduced","Is_Zero","validateEncodedSPart","isZero","s","copy","reduce","deepEqual","isCanonical","requireValid","Error","extractPublicKey","c","p","gf","pk","scalarbase","pack","sign","m","hasher","reset","update","finalize","r","subarray","signature","h","x","Float64Array","i","j","modL","verify","q","unpackneg","scalarmult","t","add","crypto_verify_32","deriveSharedKey","salt","sharedKey","sharedKeyHash","keyPairModule","createKeyPairFromPrivateKeyString","privateKey","hexToUint8","privateKeyString","length","publicKey","keyPair","data","module","exports"],"mappings":"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","file":"keyPair.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module crypto/keyPair */\nconst sha3Hasher = require('./sha3Hasher');\nconst nacl = require('../external/nacl_catapult');\nconst arrayUtils = require('../utils/arrayUtils');\nconst convert = require('../utils/convert');\n\nconst Key_Size = 32;\nconst Signature_Size = 64;\nconst Half_Signature_Size = Signature_Size / 2;\nconst Hash_Size = 64;\nconst Half_Hash_Size = Hash_Size / 2;\n\n// custom catapult hash functions\nconst catapult = {};\ncatapult.hash = {\n\tfunc: sha3Hasher.func,\n\tcreateHasher: sha3Hasher.createHasher\n};\n\n// custom catapult crypto functions\ncatapult.crypto = (() => {\n\tconst clamp = d => {\n\t\td[0] &= 248;\n\t\td[31] &= 127;\n\t\td[31] |= 64;\n\t};\n\n\tconst prepareForScalarMult = (sk, hashfunc) => {\n\t\tconst d = new Uint8Array(Hash_Size);\n\t\thashfunc(d, sk);\n\t\tclamp(d);\n\t\treturn d;\n\t};\n\n\tconst encodedSChecker = (() => {\n\t\tconst Is_Reduced = 1;\n\t\tconst Is_Zero = 2;\n\n\t\tconst validateEncodedSPart = s => {\n\t\t\tif (arrayUtils.isZero(s))\n\t\t\t\treturn Is_Zero | Is_Reduced;\n\n\t\t\tconst copy = new Uint8Array(Signature_Size);\n\t\t\tarrayUtils.copy(copy, s, Half_Signature_Size);\n\n\t\t\tnacl.catapult.reduce(copy);\n\t\t\treturn arrayUtils.deepEqual(s, copy, Half_Signature_Size) ? Is_Reduced : 0;\n\t\t};\n\n\t\treturn {\n\t\t\tisCanonical: s => Is_Reduced === validateEncodedSPart(s),\n\n\t\t\trequireValid: s => {\n\t\t\t\tif (0 === (validateEncodedSPart(s) & Is_Reduced))\n\t\t\t\t\tthrow Error('S part of signature invalid');\n\t\t\t}\n\t\t};\n\t})();\n\n\treturn {\n\t\textractPublicKey: (sk, hashfunc) => {\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst d = prepareForScalarMult(sk, hashfunc);\n\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst pk = new Uint8Array(Key_Size);\n\t\t\tc.scalarbase(p, d);\n\t\t\tc.pack(pk, p);\n\t\t\treturn pk;\n\t\t},\n\n\t\tsign: (m, pk, sk, hasher) => {\n\t\t\tconst c = nacl.catapult;\n\n\t\t\tconst d = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(sk);\n\t\t\thasher.finalize(d);\n\t\t\tclamp(d);\n\n\t\t\tconst r = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(d.subarray(Half_Hash_Size));\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(r);\n\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst signature = new Uint8Array(Signature_Size);\n\t\t\tc.reduce(r);\n\t\t\tc.scalarbase(p, r);\n\t\t\tc.pack(signature, p);\n\n\t\t\tconst h = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(signature.subarray(0, Half_Signature_Size));\n\t\t\thasher.update(pk);\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(h);\n\n\t\t\tc.reduce(h);\n\n\t\t\t// muladd\n\t\t\tconst x = new Float64Array(Hash_Size);\n\t\t\tarrayUtils.copy(x, r, Half_Hash_Size);\n\n\t\t\tfor (let i = 0; i < Half_Hash_Size; ++i) {\n\t\t\t\tfor (let j = 0; j < Half_Hash_Size; ++j)\n\t\t\t\t\tx[i + j] += h[i] * d[j];\n\t\t\t}\n\n\t\t\tc.modL(signature.subarray(Half_Signature_Size), x);\n\t\t\tencodedSChecker.requireValid(signature.subarray(Half_Signature_Size));\n\t\t\treturn signature;\n\t\t},\n\n\t\tverify: (pk, m, signature, hasher) => {\n\t\t\t// reject non canonical signature\n\t\t\tif (!encodedSChecker.isCanonical(signature.subarray(Half_Signature_Size)))\n\t\t\t\treturn false;\n\n\t\t\t// reject weak (zero) public key\n\t\t\tif (arrayUtils.isZero(pk))\n\t\t\t\treturn false;\n\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst q = [c.gf(), c.gf(), c.gf(), c.gf()];\n\n\t\t\tif (c.unpackneg(q, pk))\n\t\t\t\treturn false;\n\n\t\t\tconst h = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(signature.subarray(0, Half_Signature_Size));\n\t\t\thasher.update(pk);\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(h);\n\n\t\t\tc.reduce(h);\n\t\t\tc.scalarmult(p, q, h);\n\n\t\t\tconst t = new Uint8Array(Signature_Size);\n\t\t\tc.scalarbase(q, signature.subarray(Half_Signature_Size));\n\t\t\tc.add(p, q);\n\t\t\tc.pack(t, p);\n\n\t\t\treturn 0 === c.crypto_verify_32(signature, 0, t, 0);\n\t\t},\n\n\t\tderiveSharedKey: (salt, sk, pk, hashfunc) => {\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst d = prepareForScalarMult(sk, hashfunc);\n\n\t\t\t// sharedKey = pack(p = d (derived from sk) * q (derived from pk))\n\t\t\tconst q = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst sharedKey = new Uint8Array(Key_Size);\n\t\t\tc.unpackneg(q, pk);\n\t\t\tc.scalarmult(p, q, d);\n\t\t\tc.pack(sharedKey, p);\n\n\t\t\t// salt the shared key\n\t\t\tfor (let i = 0; i < Key_Size; ++i)\n\t\t\t\tsharedKey[i] ^= salt[i];\n\n\t\t\t// return the hash of the result\n\t\t\tconst sharedKeyHash = new Uint8Array(Key_Size);\n\t\t\thashfunc(sharedKeyHash, sharedKey, Key_Size);\n\t\t\treturn sharedKeyHash;\n\t\t}\n\t};\n})();\n\n// region exported functions\n\n/**\n * A catapult public key.\n * @typedef {Uint8Array} PublicKey\n */\n\n/**\n * A catapult key pair composed of a public and private key.\n * @typedef {object} KeyPair\n * @property {module:crypto/keyPair~PublicKey} publicKey The public key.\n * @property {Uint8Array} privateKey The private key.\n */\n\nconst keyPairModule = {\n\t/**\n \t * Creates a key pair from a private key string.\n\t * @param {string} privateKeyString A hex encoded private key string.\n\t * @returns {module:crypto/keyPair~KeyPair} The key pair.\n\t */\n\tcreateKeyPairFromPrivateKeyString: privateKeyString => {\n\t\tconst privateKey = convert.hexToUint8(privateKeyString);\n\t\tif (Key_Size !== privateKey.length)\n\t\t\tthrow Error(`private key has unexpected size: ${privateKey.length}`);\n\n\t\tconst publicKey = catapult.crypto.extractPublicKey(privateKey, catapult.hash.func);\n\t\treturn { privateKey, publicKey };\n\t},\n\n\t/**\n\t * Signs a data buffer with a key pair.\n\t * @param {module:crypto/keyPair~KeyPair} keyPair The key pair to use for signing.\n\t * @param {Uint8Array} data The data to sign.\n\t * @returns {Uint8Array} The signature.\n\t */\n\tsign: (keyPair, data) => catapult.crypto.sign(data, keyPair.publicKey, keyPair.privateKey, catapult.hash.createHasher()),\n\n\t/**\n\t * Verifies a signature.\n\t * @param {module:crypto/keyPair~PublicKey} publicKey The public key to use for verification.\n\t * @param {Uint8Array} data The data to verify.\n\t * @param {Uint8Array} signature The signature to verify.\n\t * @returns {boolean} true if the signature is verifiable, false otherwise.\n\t */\n\tverify: (publicKey, data, signature) => catapult.crypto.verify(publicKey, data, signature, catapult.hash.createHasher()),\n\n\t/**\n\t * Creates a shared key given a key pair and an arbitrary public key.\n\t * The shared key can be used for encrypted message passing between the two.\n\t * @param {module:crypto/keyPair~KeyPair} keyPair The key pair for which to create the shared key.\n\t * @param {module:crypto/keyPair~PublicKey} publicKey The public key for which to create the shared key.\n\t * @param {Uint8Array} salt A salt that should be applied to the shared key.\n\t * @returns {Uint8Array} The shared key.\n\t */\n\tderiveSharedKey: (keyPair, publicKey, salt) => {\n\t\tif (Key_Size !== salt.length)\n\t\t\tthrow Error(`salt has unexpected size: ${salt.length}`);\n\n\t\treturn catapult.crypto.deriveSharedKey(salt, keyPair.privateKey, publicKey, catapult.hash.func);\n\t}\n};\n\n// endregion\n\nmodule.exports = keyPairModule;\n"]}