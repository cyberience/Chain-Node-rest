{"version":3,"sources":["../../src/model/idGenerator.js"],"names":["require","sha3_256","constants","namespace_base_id","namespace_max_depth","name_pattern","generateId","parentId","name","hash","create","update","Uint32Array","from","buffer","result","arrayBuffer","throwInvalidFqn","reason","Error","findMosaicSeparatorIndex","mosaicSeparatorIndex","lastIndexOf","extractPartName","start","size","partName","substr","test","append","path","id","length","push","split","processor","index","idGenerator","generateMosaicId","namespaceName","namespacePath","generateNamespacePath","namespaceId","substringStart","module","exports"],"mappings":"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","file":"idGenerator.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst { sha3_256 } = require('js-sha3');\n\nconst constants = {\n\tnamespace_base_id: [0, 0],\n\tnamespace_max_depth: 3,\n\tname_pattern: /^[a-z0-9][a-z0-9-_]*$/\n};\n\nconst generateId = (parentId, name) => {\n\tconst hash = sha3_256.create();\n\thash.update(Uint32Array.from(parentId).buffer);\n\thash.update(name);\n\tconst result = new Uint32Array(hash.arrayBuffer());\n\treturn [result[0], result[1]];\n};\n\nconst throwInvalidFqn = (reason, name) => {\n\tthrow Error(`fully qualified id is invalid due to ${reason} (${name})`);\n};\n\nconst findMosaicSeparatorIndex = name => {\n\tconst mosaicSeparatorIndex = name.lastIndexOf(':');\n\tif (0 > mosaicSeparatorIndex)\n\t\tthrowInvalidFqn('missing mosaic', name);\n\n\tif (0 === mosaicSeparatorIndex)\n\t\tthrowInvalidFqn('empty part', name);\n\n\treturn mosaicSeparatorIndex;\n};\n\nconst extractPartName = (name, start, size) => {\n\tif (0 === size)\n\t\tthrowInvalidFqn('empty part', name);\n\n\tconst partName = name.substr(start, size);\n\tif (!constants.name_pattern.test(partName))\n\t\tthrowInvalidFqn(`invalid part name [${partName}]`, name);\n\n\treturn partName;\n};\n\nconst append = (path, id, name) => {\n\tif (constants.namespace_max_depth === path.length)\n\t\tthrowInvalidFqn('too many parts', name);\n\n\tpath.push(id);\n};\n\nconst split = (name, processor) => {\n\tlet start = 0;\n\tfor (let index = 0; index < name.length; ++index) {\n\t\tif ('.' === name[index]) {\n\t\t\tprocessor(start, index - start);\n\t\t\tstart = index + 1;\n\t\t}\n\t}\n\n\treturn start;\n};\n\n/** @exports model/idGenerator */\nconst idGenerator = {\n\t/**\n\t * Generates a mosaic id given a unified mosaic name.\n\t * @param {string} name The unified mosaic name.\n\t * @returns {module:utils/uint64~uint64} The mosaic id.\n\t */\n\tgenerateMosaicId: name => {\n\t\tif (0 >= name.length)\n\t\t\tthrowInvalidFqn('having zero length', name);\n\n\t\tconst mosaicSeparatorIndex = findMosaicSeparatorIndex(name);\n\n\t\tconst namespaceName = name.substr(0, mosaicSeparatorIndex);\n\t\tconst namespacePath = idGenerator.generateNamespacePath(namespaceName);\n\t\tconst namespaceId = namespacePath[namespacePath.length - 1];\n\n\t\treturn generateId(namespaceId, extractPartName(name, mosaicSeparatorIndex + 1, name.length - mosaicSeparatorIndex - 1));\n\t},\n\n\t/**\n\t * Parses a unified namespace name into a path.\n\t * @param {string} name The unified namespace name.\n\t * @returns {array<module:utils/uint64~uint64>} The namespace path.\n\t */\n\tgenerateNamespacePath: name => {\n\t\tif (0 >= name.length)\n\t\t\tthrowInvalidFqn('having zero length', name);\n\n\t\tlet namespaceId = constants.namespace_base_id;\n\t\tconst path = [];\n\t\tconst start = split(name, (substringStart, size) => {\n\t\t\tnamespaceId = generateId(namespaceId, extractPartName(name, substringStart, size));\n\t\t\tappend(path, namespaceId, name);\n\t\t});\n\n\t\tnamespaceId = generateId(namespaceId, extractPartName(name, start, name.length - start));\n\t\tappend(path, namespaceId, name);\n\t\treturn path;\n\t}\n};\n\nmodule.exports = idGenerator;\n"]}