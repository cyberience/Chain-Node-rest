{"version":3,"sources":["../../src/model/ModelSchemaBuilder.js"],"names":["EntityType","require","ModelType","ModelSchemaBuilder","schema","verifiableEntity","signature","binary","signer","blockHeader","height","uint64","timestamp","difficulty","previousBlockHash","blockTransactionsHash","stateHash","blockHeaderMetadata","hash","generationHash","totalFee","subCacheMerkleRoots","type","array","schemaName","blockHeaderWithMetadata","meta","object","block","merkleProofInfo","rootHash","merklePath","merkleProofInfoPathNode","transaction","deadline","fee","transactionMetadata","aggregateHash","aggregateId","objectId","id","merkleComponentHash","transactionWithMetadata","undefined","transactionStatus","status","statusCode","account","address","addressHeight","publicKey","publicKeyHeight","importance","importanceHeight","mosaics","mosaic","amount","accountMetadata","accountWithMetadata","chainInfo","scoreLow","scoreHigh","nodeInfo","friendlyName","string","host","communicationTimestamps","receiveTimestamp","sendTimestamp","nodeTime","storageInfo","Object","assign","setAllowedTransactions","allowedTransactions","entityTypeToString","keys","reduce","state","name","transactionType","Error","typeToName","addSchema","transactionName","transactionSchemaNameSupplier","module","exports"],"mappings":"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","file":"ModelSchemaBuilder.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module model/ModelSchemaBuilder */\nconst EntityType = require('./EntityType');\nconst ModelType = require('./ModelType');\n\n/**\n * Builder for creating a model schema.\n */\nclass ModelSchemaBuilder {\n\t/**\n\t * Creates a model schema builder.\n\t */\n\tconstructor() {\n\t\tthis.schema = {\n\t\t\t// region verifiable entity\n\n\t\t\tverifiableEntity: {\n\t\t\t\tsignature: ModelType.binary,\n\t\t\t\tsigner: ModelType.binary\n\t\t\t},\n\n\t\t\t// endregion\n\n\t\t\t// region block\n\n\t\t\tblockHeader: {\n\t\t\t\theight: ModelType.uint64,\n\t\t\t\ttimestamp: ModelType.uint64,\n\t\t\t\tdifficulty: ModelType.uint64,\n\t\t\t\tpreviousBlockHash: ModelType.binary,\n\t\t\t\tblockTransactionsHash: ModelType.binary,\n\t\t\t\tstateHash: ModelType.binary\n\t\t\t},\n\t\t\tblockHeaderMetadata: {\n\t\t\t\thash: ModelType.binary,\n\t\t\t\tgenerationHash: ModelType.binary,\n\t\t\t\ttotalFee: ModelType.uint64,\n\t\t\t\tsubCacheMerkleRoots: { type: ModelType.array, schemaName: ModelType.binary }\n\t\t\t},\n\t\t\tblockHeaderWithMetadata: {\n\t\t\t\tmeta: { type: ModelType.object, schemaName: 'blockHeaderMetadata' },\n\t\t\t\tblock: { type: ModelType.object, schemaName: 'blockHeader' }\n\t\t\t},\n\t\t\tmerkleProofInfo: {\n\t\t\t\trootHash: ModelType.binary,\n\t\t\t\tmerklePath: { type: ModelType.array, schemaName: 'merkleProofInfoPathNode' }\n\t\t\t},\n\t\t\tmerkleProofInfoPathNode: {\n\t\t\t\thash: ModelType.binary\n\t\t\t},\n\n\t\t\t// endregion\n\n\t\t\t// region transaction\n\n\t\t\ttransaction: {\n\t\t\t\tdeadline: ModelType.uint64,\n\t\t\t\tfee: ModelType.uint64\n\t\t\t},\n\t\t\ttransactionMetadata: {\n\t\t\t\taggregateHash: ModelType.binary,\n\t\t\t\taggregateId: ModelType.objectId,\n\t\t\t\tid: ModelType.objectId,\n\t\t\t\theight: ModelType.uint64,\n\t\t\t\thash: ModelType.binary,\n\t\t\t\tmerkleComponentHash: ModelType.binary\n\t\t\t},\n\t\t\ttransactionWithMetadata: {\n\t\t\t\tmeta: { type: ModelType.object, schemaName: 'transactionMetadata' },\n\t\t\t\ttransaction: {\n\t\t\t\t\ttype: ModelType.object,\n\t\t\t\t\t// notice that this needs to be set in build to allow graceful fallback when some txes are not registered\n\t\t\t\t\tschemaName: undefined\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// endregion\n\n\t\t\t// region transactionStatus\n\n\t\t\ttransactionStatus: {\n\t\t\t\thash: ModelType.binary,\n\t\t\t\tstatus: ModelType.statusCode,\n\t\t\t\tdeadline: ModelType.uint64,\n\t\t\t\theight: ModelType.uint64\n\t\t\t},\n\n\t\t\t// endregion\n\n\t\t\t// region account\n\n\t\t\taccount: {\n\t\t\t\taddress: ModelType.binary,\n\t\t\t\taddressHeight: ModelType.uint64,\n\t\t\t\tpublicKey: ModelType.binary,\n\t\t\t\tpublicKeyHeight: ModelType.uint64,\n\t\t\t\timportance: ModelType.uint64,\n\t\t\t\timportanceHeight: ModelType.uint64,\n\t\t\t\tmosaics: { type: ModelType.array, schemaName: 'mosaic' }\n\t\t\t},\n\t\t\tmosaic: {\n\t\t\t\tid: ModelType.uint64,\n\t\t\t\tamount: ModelType.uint64\n\t\t\t},\n\t\t\taccountMetadata: {\n\t\t\t},\n\t\t\taccountWithMetadata: {\n\t\t\t\tmeta: { type: ModelType.object, schemaName: 'accountMetadata' },\n\t\t\t\taccount: { type: ModelType.object, schemaName: 'account' }\n\t\t\t},\n\n\t\t\t// endregion\n\n\t\t\t// region other\n\n\t\t\tchainInfo: {\n\t\t\t\theight: ModelType.uint64,\n\t\t\t\tscoreLow: ModelType.uint64,\n\t\t\t\tscoreHigh: ModelType.uint64\n\t\t\t},\n\n\t\t\tnodeInfo: {\n\t\t\t\tfriendlyName: ModelType.string,\n\t\t\t\thost: ModelType.string,\n\t\t\t\tpublicKey: ModelType.binary\n\t\t\t},\n\n\t\t\tcommunicationTimestamps: {\n\t\t\t\treceiveTimestamp: ModelType.uint64,\n\t\t\t\tsendTimestamp: ModelType.uint64\n\t\t\t},\n\t\t\tnodeTime: {\n\t\t\t\tcommunicationTimestamps: { type: ModelType.object, schemaName: 'communicationTimestamps' }\n\t\t\t},\n\n\t\t\tstorageInfo: {\n\t\t\t}\n\n\t\t\t// endregion\n\t\t};\n\n\t\tObject.assign(this.schema.blockHeader, this.schema.verifiableEntity);\n\t\tObject.assign(this.schema.transaction, this.schema.verifiableEntity);\n\n\t\tthis.setAllowedTransactions(EntityType);\n\t}\n\n\t/**\n\t * Sets transactions allowed by addTransactionSupport.\n\t * @param {object} allowedTransactions Allowed transactions.\n\t */\n\tsetAllowedTransactions(allowedTransactions) {\n\t\t// prepare reverse mapping id => string\n\t\tthis.entityTypeToString = Object.keys(allowedTransactions).reduce((state, name) => {\n\t\t\tstate[allowedTransactions[name]] = name;\n\t\t\treturn state;\n\t\t}, {});\n\t}\n\n\t/**\n\t * Returns name for allowed transaction.\n\t * @param {module:model/EntityType} transactionType Transaction type.\n\t * @returns {string} Transaction name corresponding to type.\n\t */\n\ttypeToName(transactionType) {\n\t\tif (!(transactionType in this.entityTypeToString))\n\t\t\tthrow Error(`transactionType is not in the list of allowed transactions '${transactionType}'`);\n\n\t\treturn this.entityTypeToString[transactionType];\n\t}\n\n\t/**\n\t * Adds support for a transaction type.\n\t * @param {module:model/EntityType} transactionType The transaction type.\n\t * @param {object} schema The transaction schema.\n\t */\n\taddTransactionSupport(transactionType, schema) {\n\t\tconst name = this.typeToName(transactionType);\n\t\tthis.addSchema(name, schema);\n\t\tObject.assign(this.schema[name], this.schema.transaction);\n\t}\n\n\t/**\n\t * Adds support for a named schema.\n\t * @param {string} name The schema name.\n\t * @param {object} schema The schema.\n\t */\n\taddSchema(name, schema) {\n\t\tif (this.schema[name])\n\t\t\tthrow Error(`schema already registered for '${name}'`);\n\n\t\tthis.schema[name] = schema;\n\t}\n\n\t/**\n\t * Returns a function that returns the best known schema for a given transaction.\n\t * @returns {function} The transaction schema lookup function.\n\t */\n\ttransactionSchemaNameSupplier() {\n\t\t// default to transaction\n\t\treturn transaction => {\n\t\t\tconst transactionName = this.entityTypeToString[transaction.type];\n\t\t\treturn transactionName && this.schema[transactionName] ? transactionName : 'transaction';\n\t\t};\n\t}\n\n\t/**\n\t * Builds the schema and returns an appropriate aggregate schema object.\n\t * @returns {object} The aggregate schema object.\n\t */\n\tbuild() {\n\t\tthis.schema.transactionWithMetadata.transaction.schemaName = this.transactionSchemaNameSupplier();\n\t\treturn this.schema;\n\t}\n}\n\nmodule.exports = ModelSchemaBuilder;\n"]}