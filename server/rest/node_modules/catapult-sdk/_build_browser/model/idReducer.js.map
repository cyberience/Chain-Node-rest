{"version":3,"sources":["../../src/model/idReducer.js"],"names":["uint64","require","idReducer","createIdToNameLookup","nextRoundKeys","lookupMap","nameTuples","forEach","key","toHex","nameTuple","namespaceId","Object","assign","fqn","name","isZero","parentId","nextId","push","processRoundKeys","additionalProcessingKeys","roundKeys","parentEntry","undefined","length","currentRoundKeys","slice","findName","id","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,SAASC,QAAQ,iBAAR,CAAf;;AAEA,IAAMC,YAAY;AACjB;;;;;AAKAC,uBAAsB,0CAAc;AACnC,MAAIC,gBAAgB,EAApB;;AAEA;AACA,MAAMC,YAAY,EAAlB;AACAC,aAAWC,OAAX,CAAmB,qBAAa;AAC/B,OAAMC,MAAMR,OAAOS,KAAP,CAAaC,UAAUC,WAAvB,CAAZ;;AAEA;AACA,OAAI,CAACN,UAAUG,GAAV,CAAL,EAAqB;AACpBH,cAAUG,GAAV,IAAiBI,OAAOC,MAAP,CAAc,EAAEC,KAAKJ,UAAUK,IAAjB,EAAd,EAAuCL,SAAvC,CAAjB;AACA,QAAI,CAACV,OAAOgB,MAAP,CAAcN,UAAUO,QAAxB,CAAL,EAAwC;AACvCZ,eAAUG,GAAV,EAAeU,MAAf,GAAwBR,UAAUO,QAAlC;AACAb,mBAAce,IAAd,CAAmBX,GAAnB;AACA;AACD;AACD,GAXD;;AAaA;AACA,MAAMY,mBAAmB,SAAnBA,gBAAmB,YAAa;AACrC,OAAMC,2BAA2B,EAAjC;AACAC,aAAUf,OAAV,CAAkB,eAAO;AACxB,QAAMG,YAAYL,UAAUG,GAAV,CAAlB;AACA,QAAMe,cAAclB,UAAUL,OAAOS,KAAP,CAAaC,UAAUQ,MAAvB,CAAV,CAApB;AACAR,cAAUI,GAAV,GAAgBS,cAAiBA,YAAYR,IAA7B,SAAqCL,UAAUI,GAA/C,GAAuDU,SAAvE;;AAEA,QAAI,CAACD,WAAD,IAAgBvB,OAAOgB,MAAP,CAAcO,YAAYN,QAA1B,CAApB,EAAyD;AACxD,YAAOP,UAAUQ,MAAjB;AACA,KAFD,MAEO;AACN;AACAR,eAAUQ,MAAV,GAAmBK,YAAYN,QAA/B;AACAI,8BAAyBF,IAAzB,CAA8BX,GAA9B;AACA;AACD,IAZD;;AAcA,UAAOa,wBAAP;AACA,GAjBD;;AAmBA,SAAO,MAAMjB,cAAcqB,MAA3B,EAAmC;AAClC,OAAMC,mBAAmBtB,cAAcuB,KAAd,EAAzB;AACAvB,mBAAgBgB,iBAAiBM,gBAAjB,CAAhB;AACA;;AAED,SAAO;AACN;;;;AAIAD,WAAQnB,WAAWmB,MALb;;AAON;;;;;AAKAG,aAAU;AAAA,WAAM,CAACvB,UAAUL,OAAOS,KAAP,CAAaoB,EAAb,CAAV,KAA+B,EAAhC,EAAoCf,GAA1C;AAAA;AAZJ,GAAP;AAcA;AA/DgB,CAAlB;;AAkEAgB,OAAOC,OAAP,GAAiB7B,SAAjB","file":"idReducer.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module model/idReducer */\nconst uint64 = require('../utils/uint64');\n\nconst idReducer = {\n\t/**\n\t * Creates an id to name lookup object around namespace name tuples.\n\t * @param {array} nameTuples The namespace name tuples.\n\t * @returns {object} An id to name lookup object.\n\t */\n\tcreateIdToNameLookup: nameTuples => {\n\t\tlet nextRoundKeys = [];\n\n\t\t// copy all tuples into an id -> value dictionary\n\t\tconst lookupMap = {};\n\t\tnameTuples.forEach(nameTuple => {\n\t\t\tconst key = uint64.toHex(nameTuple.namespaceId);\n\n\t\t\t// give preference to first of conflicts\n\t\t\tif (!lookupMap[key]) {\n\t\t\t\tlookupMap[key] = Object.assign({ fqn: nameTuple.name }, nameTuple);\n\t\t\t\tif (!uint64.isZero(nameTuple.parentId)) {\n\t\t\t\t\tlookupMap[key].nextId = nameTuple.parentId;\n\t\t\t\t\tnextRoundKeys.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// each round processes the tuples from the previous round that have a nonzero parent\n\t\tconst processRoundKeys = roundKeys => {\n\t\t\tconst additionalProcessingKeys = [];\n\t\t\troundKeys.forEach(key => {\n\t\t\t\tconst nameTuple = lookupMap[key];\n\t\t\t\tconst parentEntry = lookupMap[uint64.toHex(nameTuple.nextId)];\n\t\t\t\tnameTuple.fqn = parentEntry ? `${parentEntry.name}.${nameTuple.fqn}` : undefined;\n\n\t\t\t\tif (!parentEntry || uint64.isZero(parentEntry.parentId)) {\n\t\t\t\t\tdelete nameTuple.nextId;\n\t\t\t\t} else {\n\t\t\t\t\t// if the nextId is nonzero, additional processing is required\n\t\t\t\t\tnameTuple.nextId = parentEntry.parentId;\n\t\t\t\t\tadditionalProcessingKeys.push(key);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn additionalProcessingKeys;\n\t\t};\n\n\t\twhile (0 !== nextRoundKeys.length) {\n\t\t\tconst currentRoundKeys = nextRoundKeys.slice();\n\t\t\tnextRoundKeys = processRoundKeys(currentRoundKeys);\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * The number of id to name mappings known by this object.\n\t\t\t * @property {numeric}\n\t\t\t */\n\t\t\tlength: nameTuples.length,\n\n\t\t\t/**\n\t\t\t * Returns the name for an id or undefined if no mapping exists\n\t\t\t * @param {module:utils/uint64~uint64} id A uint64 value representing a namespace id.\n\t\t\t * @returns {string} The fully qualified namespace name corresponding to the id.\n\t\t\t */\n\t\t\tfindName: id => (lookupMap[uint64.toHex(id)] || {}).fqn\n\t\t};\n\t}\n};\n\nmodule.exports = idReducer;\n"]}