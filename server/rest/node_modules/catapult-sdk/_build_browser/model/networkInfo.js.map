{"version":3,"sources":["../../src/model/networkInfo.js"],"names":["base32","require","convert","networks","createNetworkInfo","id","bytePrefix","uint8ToHex","charPrefix","encode","Uint8Array","of","mijin","mijinTest","public","publicTest","findNetwork","key","value","matchNetworkName","Object","keys","find","name","undefined","networkInfo","findById","findByCharPrefix","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,SAASC,QAAQ,iBAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,kBAAR,CAAhB;;AAEA;;;;;;;;AAQA,IAAME,WAAY,YAAM;AACvB,KAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,SAAO;AAChCC,SADgC,EAC5BC,YAAYJ,QAAQK,UAAR,CAAmB,CAACF,EAAD,CAAnB,CADgB,EACUG,YAAYR,OAAOS,MAAP,CAAcC,WAAWC,EAAX,CAAcN,EAAd,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAd,EAA6C,CAA7C;AADtB,GAAP;AAAA,EAA1B;;AAIA;;;;;;;;AAQA,QAAO;AACNO,SAAOR,kBAAkB,IAAlB,CADD;AAENS,aAAWT,kBAAkB,IAAlB,CAFL;AAGNU,UAAQV,kBAAkB,IAAlB,CAHF;AAINW,cAAYX,kBAAkB,IAAlB;AAJN,EAAP;AAMA,CAnBgB,EAAjB;;AAqBA,IAAMY,cAAc,SAAdA,WAAc,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACnC,KAAMC,mBAAmBC,OAAOC,IAAP,CAAYlB,QAAZ,EAAsBmB,IAAtB,CAA2B;AAAA,SAAQJ,UAAUf,SAASoB,IAAT,EAAeN,GAAf,CAAlB;AAAA,EAA3B,CAAzB;AACA,QAAOO,cAAcL,gBAAd,GAAiCK,SAAjC,GAA6CrB,SAASgB,gBAAT,CAApD;AACA,CAHD;;AAKA,IAAMM,cAAc;AACnB;AACAtB,mBAFmB;;AAInB;;;;;AAKAuB,WAAU;AAAA,SAAMV,YAAY,IAAZ,EAAkBX,EAAlB,CAAN;AAAA,EATS;;AAWnB;;;;;;AAMAsB,mBAAkB;AAAA,SAAcX,YAAY,YAAZ,EAA0BR,UAA1B,CAAd;AAAA;AAjBC,CAApB;;AAoBAoB,OAAOC,OAAP,GAAiBJ,WAAjB","file":"networkInfo.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module model/networkInfo */\nconst base32 = require('../utils/base32');\nconst convert = require('../utils/convert');\n\n/**\n * Information about a catapult network.\n * @typedef {object} NetworkInfo\n * @property {numeric} id The network id.\n * @property {numeric} bytePrefix The first byte of a compatible network (decoded) address.\n * @property {string} charPrefix The first character of a compatible network (encoded) address.\n */\n\nconst networks = (() => {\n\tconst createNetworkInfo = id => ({\n\t\tid, bytePrefix: convert.uint8ToHex([id]), charPrefix: base32.encode(Uint8Array.of(id, 0, 0, 0, 0))[0]\n\t});\n\n\t/**\n\t * Information about well known catapult networks.\n\t * @typedef {object} WellKnownNetworks\n\t * @property {NetworkInfo} mijin Mijin network information.\n\t * @property {NetworkInfo} mijinTest Mijin test network information.\n\t * @property {NetworkInfo} public Public network information.\n\t * @property {NetworkInfo} publicTest Public test network information.\n\t */\n\treturn {\n\t\tmijin: createNetworkInfo(0x60),\n\t\tmijinTest: createNetworkInfo(0x90),\n\t\tpublic: createNetworkInfo(0x68),\n\t\tpublicTest: createNetworkInfo(0x98)\n\t};\n})();\n\nconst findNetwork = (key, value) => {\n\tconst matchNetworkName = Object.keys(networks).find(name => value === networks[name][key]);\n\treturn undefined === matchNetworkName ? undefined : networks[matchNetworkName];\n};\n\nconst networkInfo = {\n\t/** @property {module:model/networkInfo~WellKnownNetworks} networks Information about well known networks. */\n\tnetworks,\n\n\t/**\n\t * Finds network information given a network id.\n\t * @param {numeric} id The network id.\n\t * @returns {module:model/networkInfo~NetworkInfo} The network with the specified id or undefined if unknown.\n\t */\n\tfindById: id => findNetwork('id', id),\n\n\t/**\n\t * Finds network information given a network address character prefix.\n\t * @param {string} charPrefix The address character prefix.\n\t * @returns {module:model/networkInfo~NetworkInfo} The network with the specified address character prefix\n\t *          or undefined if unknown.\n\t */\n\tfindByCharPrefix: charPrefix => findNetwork('charPrefix', charPrefix)\n};\n\nmodule.exports = networkInfo;\n"]}