'use strict';

/*
 * Copyright (c) 2016-present,
 * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
 *
 * This file is part of Catapult.
 *
 * Catapult is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Catapult is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @module model/networkInfo */
var base32 = require('../utils/base32');
var convert = require('../utils/convert');

/**
 * Information about a catapult network.
 * @typedef {object} NetworkInfo
 * @property {numeric} id The network id.
 * @property {numeric} bytePrefix The first byte of a compatible network (decoded) address.
 * @property {string} charPrefix The first character of a compatible network (encoded) address.
 */

var networks = function () {
	var createNetworkInfo = function createNetworkInfo(id) {
		return {
			id: id, bytePrefix: convert.uint8ToHex([id]), charPrefix: base32.encode(Uint8Array.of(id, 0, 0, 0, 0))[0]
		};
	};

	/**
  * Information about well known catapult networks.
  * @typedef {object} WellKnownNetworks
  * @property {NetworkInfo} mijin Mijin network information.
  * @property {NetworkInfo} mijinTest Mijin test network information.
  * @property {NetworkInfo} public Public network information.
  * @property {NetworkInfo} publicTest Public test network information.
  */
	return {
		mijin: createNetworkInfo(0x60),
		mijinTest: createNetworkInfo(0x90),
		public: createNetworkInfo(0x68),
		publicTest: createNetworkInfo(0x98)
	};
}();

var findNetwork = function findNetwork(key, value) {
	var matchNetworkName = Object.keys(networks).find(function (name) {
		return value === networks[name][key];
	});
	return undefined === matchNetworkName ? undefined : networks[matchNetworkName];
};

var networkInfo = {
	/** @property {module:model/networkInfo~WellKnownNetworks} networks Information about well known networks. */
	networks: networks,

	/**
  * Finds network information given a network id.
  * @param {numeric} id The network id.
  * @returns {module:model/networkInfo~NetworkInfo} The network with the specified id or undefined if unknown.
  */
	findById: function findById(id) {
		return findNetwork('id', id);
	},

	/**
  * Finds network information given a network address character prefix.
  * @param {string} charPrefix The address character prefix.
  * @returns {module:model/networkInfo~NetworkInfo} The network with the specified address character prefix
  *          or undefined if unknown.
  */
	findByCharPrefix: function findByCharPrefix(charPrefix) {
		return findNetwork('charPrefix', charPrefix);
	}
};

module.exports = networkInfo;
//# sourceMappingURL=networkInfo.js.map