{"version":3,"sources":["../../src/parser/PacketParser.js"],"names":["EventEmitter","require","BinaryParser","Packet_Header_Size","PacketParserImpl","parser","packetHeader","undefined","emitter","buffer","push","processHeader","processBody","numUnprocessedBytes","size","uint32","type","Error","raisePacketEvent","payload","Buffer","alloc","emit","PacketParser","impl","handler","on","module","exports"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,eAAeC,QAAQ,QAAR,CAArB;AACA,IAAMC,eAAeD,QAAQ,gBAAR,CAArB;;AAEA,IAAME,qBAAqB,CAA3B;;IAEMC,gB;AACL,6BAAc;AAAA;;AACb,OAAKC,MAAL,GAAc,IAAIH,YAAJ,EAAd;AACA,OAAKI,YAAL,GAAoBC,SAApB;AACA,OAAKC,OAAL,GAAe,IAAIR,YAAJ,EAAf;AACA;;;;uBAEIS,M,EAAQ;AACZ,QAAKJ,MAAL,CAAYK,IAAZ,CAAiBD,MAAjB;;AAEA;AACA,MAAG;AACF,SAAKE,aAAL;AACA,SAAKC,WAAL;AACA,IAHD,QAGS,KAAKD,aAAL,EAHT;AAIA;;;kCAEe;AACf,OAAIJ,cAAc,KAAKD,YAAnB,IAAmC,KAAKD,MAAL,CAAYQ,mBAAZ,KAAoCV,kBAA3E,EACC,OAAO,KAAP;;AAED,OAAMW,OAAO,KAAKT,MAAL,CAAYU,MAAZ,EAAb;AACA,OAAMC,OAAO,KAAKX,MAAL,CAAYU,MAAZ,EAAb;;AAEA,OAAID,OAAOX,kBAAX,EACC,MAAMc,wBAAsBH,IAAtB,8CAAN;;AAED,QAAKR,YAAL,GAAoB,EAAEQ,UAAF,EAAQE,UAAR,EAApB;AACA,UAAO,IAAP;AACA;;;gCAEa;AACb,OAAIT,cAAc,KAAKD,YAAnB,IAAmC,KAAKD,MAAL,CAAYQ,mBAAZ,KAAoC,KAAKP,YAAL,CAAkBQ,IAAlB,GAAyBX,kBAApG,EACC,OAAO,KAAP;;AAED,QAAKe,gBAAL;AACA,QAAKZ,YAAL,GAAoBC,SAApB;AACA,UAAO,IAAP;AACA;;;qCAEkB;AAClB;AACA,OAAMY,UAAU,KAAKb,YAAL,CAAkBQ,IAAlB,GAAyBX,kBAAzB,GACb,KAAKE,MAAL,CAAYI,MAAZ,CAAmB,KAAKH,YAAL,CAAkBQ,IAAlB,GAAyBX,kBAA5C,CADa,GAEbiB,OAAOC,KAAP,CAAa,CAAb,CAFH;;AAIA,QAAKb,OAAL,CAAac,IAAb,CAAkB,QAAlB,EAA4B,EAAEN,MAAM,KAAKV,YAAL,CAAkBU,IAA1B,EAAgCF,MAAM,KAAKR,YAAL,CAAkBQ,IAAxD,EAA8DK,gBAA9D,EAA5B;AACA;;;;;;AAGF;;;;;;;;AAQA;;;;;IAGMI,Y;AACL;;;AAGA,yBAAc;AAAA;;AACb,OAAKC,IAAL,GAAY,IAAIpB,gBAAJ,EAAZ;AACA;;AAED;;;;;;;;uBAIKK,M,EAAQ;AACZ,QAAKe,IAAL,CAAUd,IAAV,CAAeD,MAAf;AACA;;AAED;;;;;;;2BAISgB,O,EAAS;AACjB,QAAKD,IAAL,CAAUhB,OAAV,CAAkBkB,EAAlB,CAAqB,QAArB,EAA+BD,OAA/B;AACA;;;;;;AAGFE,OAAOC,OAAP,GAAiBL,YAAjB","file":"PacketParser.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module parser/PacketParser */\nconst EventEmitter = require('events');\nconst BinaryParser = require('./BinaryParser');\n\nconst Packet_Header_Size = 8;\n\nclass PacketParserImpl {\n\tconstructor() {\n\t\tthis.parser = new BinaryParser();\n\t\tthis.packetHeader = undefined;\n\t\tthis.emitter = new EventEmitter();\n\t}\n\n\tpush(buffer) {\n\t\tthis.parser.push(buffer);\n\n\t\t// note: processHeader will process at most one header when called consecutively\n\t\tdo {\n\t\t\tthis.processHeader();\n\t\t\tthis.processBody();\n\t\t} while (this.processHeader());\n\t}\n\n\tprocessHeader() {\n\t\tif (undefined !== this.packetHeader || this.parser.numUnprocessedBytes() < Packet_Header_Size)\n\t\t\treturn false;\n\n\t\tconst size = this.parser.uint32();\n\t\tconst type = this.parser.uint32();\n\n\t\tif (size < Packet_Header_Size)\n\t\t\tthrow Error(`packet size (${size}) cannot be less than packet header size`);\n\n\t\tthis.packetHeader = { size, type };\n\t\treturn true;\n\t}\n\n\tprocessBody() {\n\t\tif (undefined === this.packetHeader || this.parser.numUnprocessedBytes() < this.packetHeader.size - Packet_Header_Size)\n\t\t\treturn false;\n\n\t\tthis.raisePacketEvent();\n\t\tthis.packetHeader = undefined;\n\t\treturn true;\n\t}\n\n\traisePacketEvent() {\n\t\t// consume the entire payload\n\t\tconst payload = this.packetHeader.size > Packet_Header_Size\n\t\t\t? this.parser.buffer(this.packetHeader.size - Packet_Header_Size)\n\t\t\t: Buffer.alloc(0);\n\n\t\tthis.emitter.emit('packet', { type: this.packetHeader.type, size: this.packetHeader.size, payload });\n\t}\n}\n\n/**\n * A raw packet composed of header information and a payload.\n * @typedef {object} RawPacket\n * @property {numeric} type The packet type.\n * @property {numeric} size The packet size.\n * @property {Buffer} payload The packet payload.\n */\n\n/**\n * Accepts and buffers binary data and emits events when full packets have been received.\n */\nclass PacketParser {\n\t/**\n\t * Creates a packet parser.\n\t */\n\tconstructor() {\n\t\tthis.impl = new PacketParserImpl();\n\t}\n\n\t/**\n\t * Accepts a binary buffer and appends it to the end of the working buffer.\n\t * @param {Buffer} buffer The binary buffer.\n\t */\n\tpush(buffer) {\n\t\tthis.impl.push(buffer);\n\t}\n\n\t/**\n\t * Subscribes a handler to receive notifications when full packets have been received.\n\t * @param {Function} handler The handler function that is called with a {@link module:parser/PacketParser~RawPacket}.\n\t */\n\tonPacket(handler) {\n\t\tthis.impl.emitter.on('packet', handler);\n\t}\n}\n\nmodule.exports = PacketParser;\n"]}