{"version":3,"sources":["../../src/utils/base32.js"],"names":["charMapping","require","Alphabet","Decoded_Block_Size","Encoded_Block_Size","encodeBlock","input","inputOffset","output","outputOffset","Char_To_Decoded_Char_Map","builder","createBuilder","addRange","map","decodeChar","decodedChar","c","undefined","Error","decodeBlock","bytes","Uint8Array","i","base32","encode","data","length","Array","join","decode","encoded","module","exports"],"mappings":"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","file":"base32.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module utils/base32 */\nconst charMapping = require('./charMapping');\n\nconst Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\nconst Decoded_Block_Size = 5;\nconst Encoded_Block_Size = 8;\n\n// region encode\n\nconst encodeBlock = (input, inputOffset, output, outputOffset) => {\n\toutput[outputOffset + 0] = Alphabet[input[inputOffset + 0] >> 3];\n\toutput[outputOffset + 1] = Alphabet[((input[inputOffset + 0] & 0x07) << 2) | (input[inputOffset + 1] >> 6)];\n\toutput[outputOffset + 2] = Alphabet[(input[inputOffset + 1] & 0x3E) >> 1];\n\toutput[outputOffset + 3] = Alphabet[((input[inputOffset + 1] & 0x01) << 4) | (input[inputOffset + 2] >> 4)];\n\toutput[outputOffset + 4] = Alphabet[((input[inputOffset + 2] & 0x0F) << 1) | (input[inputOffset + 3] >> 7)];\n\toutput[outputOffset + 5] = Alphabet[(input[inputOffset + 3] & 0x7F) >> 2];\n\toutput[outputOffset + 6] = Alphabet[((input[inputOffset + 3] & 0x03) << 3) | (input[inputOffset + 4] >> 5)];\n\toutput[outputOffset + 7] = Alphabet[input[inputOffset + 4] & 0x1F];\n};\n\n// endregion\n\n// region decode\n\nconst Char_To_Decoded_Char_Map = (() => {\n\tconst builder = charMapping.createBuilder();\n\tbuilder.addRange('A', 'Z', 0);\n\tbuilder.addRange('2', '7', 26);\n\treturn builder.map;\n})();\n\nconst decodeChar = c => {\n\tconst decodedChar = Char_To_Decoded_Char_Map[c];\n\tif (undefined !== decodedChar)\n\t\treturn decodedChar;\n\n\tthrow Error(`illegal base32 character ${c}`);\n};\n\nconst decodeBlock = (input, inputOffset, output, outputOffset) => {\n\tconst bytes = new Uint8Array(Encoded_Block_Size);\n\tfor (let i = 0; i < Encoded_Block_Size; ++i)\n\t\tbytes[i] = decodeChar(input[inputOffset + i]);\n\n\toutput[outputOffset + 0] = (bytes[0] << 3) | (bytes[1] >> 2);\n\toutput[outputOffset + 1] = ((bytes[1] & 0x03) << 6) | (bytes[2] << 1) | (bytes[3] >> 4);\n\toutput[outputOffset + 2] = ((bytes[3] & 0x0F) << 4) | (bytes[4] >> 1);\n\toutput[outputOffset + 3] = ((bytes[4] & 0x01) << 7) | (bytes[5] << 2) | (bytes[6] >> 3);\n\toutput[outputOffset + 4] = ((bytes[6] & 0x07) << 5) | bytes[7];\n};\n\n// endregion\n\nconst base32 = {\n\t/**\n\t * Base32 encodes a binary buffer.\n\t * @param {Uint8Array} data The binary data to encode.\n\t * @returns {string} The base32 encoded string corresponding to the input data.\n\t */\n\tencode: data => {\n\t\tif (0 !== data.length % Decoded_Block_Size)\n\t\t\tthrow Error(`decoded size must be multiple of ${Decoded_Block_Size}`);\n\n\t\tconst output = new Array(data.length / Decoded_Block_Size * Encoded_Block_Size);\n\t\tfor (let i = 0; i < data.length / Decoded_Block_Size; ++i)\n\t\t\tencodeBlock(data, i * Decoded_Block_Size, output, i * Encoded_Block_Size);\n\n\t\treturn output.join('');\n\t},\n\n\t/**\n\t * Base32 decodes a base32 encoded string.\n\t * @param {string} encoded The base32 encoded string to decode.\n\t * @returns {Uint8Array} The binary data corresponding to the input string.\n\t */\n\tdecode: encoded => {\n\t\tif (0 !== encoded.length % Encoded_Block_Size)\n\t\t\tthrow Error(`encoded size must be multiple of ${Encoded_Block_Size}`);\n\n\t\tconst output = new Uint8Array(encoded.length / Encoded_Block_Size * Decoded_Block_Size);\n\t\tfor (let i = 0; i < encoded.length / Encoded_Block_Size; ++i)\n\t\t\tdecodeBlock(encoded, i * Encoded_Block_Size, output, i * Decoded_Block_Size);\n\n\t\treturn output;\n\t}\n};\n\nmodule.exports = base32;\n"]}