{"version":3,"sources":["../../src/utils/charMapping.js"],"names":["charMapping","createBuilder","map","addRange","start","end","base","startCode","charCodeAt","endCode","code","String","fromCharCode","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;;;;;;;AAOA,IAAMA,cAAc;AACnB;;;;AAIAC,gBAAe,yBAAM;AACpB,MAAMC,MAAM,EAAZ;AACA,SAAO;AACNA,WADM;;AAGN;;;;;;;;AAQAC,aAAU,kBAACC,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAsB;AAC/B,QAAMC,YAAYH,MAAMI,UAAN,CAAiB,CAAjB,CAAlB;AACA,QAAMC,UAAUJ,IAAIG,UAAJ,CAAe,CAAf,CAAhB;;AAEA,SAAK,IAAIE,OAAOH,SAAhB,EAA2BG,QAAQD,OAAnC,EAA4C,EAAEC,IAA9C;AACCR,SAAIS,OAAOC,YAAP,CAAoBF,IAApB,CAAJ,IAAiCA,OAAOH,SAAP,GAAmBD,IAApD;AADD;AAEA;AAjBK,GAAP;AAmBA;AA1BkB,CAApB;;AA6BAO,OAAOC,OAAP,GAAiBd,WAAjB","file":"charMapping.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module utils/charMapping */\n\n/**\n * Builder for building a character map.\n * @class CharacterMapBuilder\n *\n * @property {object} map The character map.\n */\n\nconst charMapping = {\n\t/**\n\t * Creates a builder for building a character map.\n\t * @returns {module:utils/charMapping~CharacterMapBuilder} A character map builder.\n\t */\n\tcreateBuilder: () => {\n\t\tconst map = {};\n\t\treturn {\n\t\t\tmap,\n\n\t\t\t/**\n\t\t\t * Adds a range mapping to the map.\n\t\t\t * @param {string} start The start character.\n\t\t\t * @param {string} end The end character.\n\t\t\t * @param {numeric} base The value corresponding to the start character.\n\t\t\t * @memberof module:utils/charMapping~CharacterMapBuilder\n\t\t\t * @instance\n\t\t\t */\n\t\t\taddRange: (start, end, base) => {\n\t\t\t\tconst startCode = start.charCodeAt(0);\n\t\t\t\tconst endCode = end.charCodeAt(0);\n\n\t\t\t\tfor (let code = startCode; code <= endCode; ++code)\n\t\t\t\t\tmap[String.fromCharCode(code)] = code - startCode + base;\n\t\t\t}\n\t\t};\n\t}\n};\n\nmodule.exports = charMapping;\n"]}