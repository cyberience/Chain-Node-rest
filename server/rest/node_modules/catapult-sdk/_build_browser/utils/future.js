"use strict";

/*
 * Copyright (c) 2016-present,
 * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
 *
 * This file is part of Catapult.
 *
 * Catapult is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Catapult is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @module utils/future */

var future = {
	/**
  * Makes a future retryable.
  * @param {Function} futureSupplier The function that returns a new instance of the wrapped future.
  * @param {Numeric} maxAttempts The maximum number of attempts.
  * @param {Function} waitTimeSupplier The function that calculates the amount of time to wait after a failure.
  * @returns {Promise} A promise that is resolved when the future succeeds or the maximum number of attempts have failed.
  */
	makeRetryable: function makeRetryable(futureSupplier, maxAttempts, waitTimeSupplier) {
		var numRemainingAttempts = maxAttempts;
		var step = function step(resolve, reject) {
			--numRemainingAttempts;
			futureSupplier().then(function (o) {
				resolve(o);
			}).catch(function (err) {
				if (0 === numRemainingAttempts) {
					reject(err);
					return;
				}

				var waitTime = waitTimeSupplier(maxAttempts - numRemainingAttempts, err);
				setTimeout(function () {
					step(resolve, reject);
				}, waitTime);
			});
		};

		return new Promise(function (resolve, reject) {
			step(resolve, reject);
		});
	}
};

module.exports = future;
//# sourceMappingURL=future.js.map