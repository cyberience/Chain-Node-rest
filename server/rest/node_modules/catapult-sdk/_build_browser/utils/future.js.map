{"version":3,"sources":["../../src/utils/future.js"],"names":["future","makeRetryable","futureSupplier","maxAttempts","waitTimeSupplier","numRemainingAttempts","step","resolve","reject","then","o","catch","err","waitTime","setTimeout","Promise","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA,IAAMA,SAAS;AACd;;;;;;;AAOAC,gBAAe,uBAACC,cAAD,EAAiBC,WAAjB,EAA8BC,gBAA9B,EAAmD;AACjE,MAAIC,uBAAuBF,WAA3B;AACA,MAAMG,OAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,MAAV,EAAqB;AACjC,KAAEH,oBAAF;AACAH,oBACEO,IADF,CACO,aAAK;AACVF,YAAQG,CAAR;AACA,IAHF,EAIEC,KAJF,CAIQ,eAAO;AACb,QAAI,MAAMN,oBAAV,EAAgC;AAC/BG,YAAOI,GAAP;AACA;AACA;;AAED,QAAMC,WAAWT,iBAAiBD,cAAcE,oBAA/B,EAAqDO,GAArD,CAAjB;AACAE,eAAW,YAAM;AAAER,UAAKC,OAAL,EAAcC,MAAd;AAAwB,KAA3C,EAA6CK,QAA7C;AACA,IAZF;AAaA,GAfD;;AAiBA,SAAO,IAAIE,OAAJ,CAAY,UAACR,OAAD,EAAUC,MAAV,EAAqB;AACvCF,QAAKC,OAAL,EAAcC,MAAd;AACA,GAFM,CAAP;AAGA;AA9Ba,CAAf;;AAiCAQ,OAAOC,OAAP,GAAiBjB,MAAjB","file":"future.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module utils/future */\n\nconst future = {\n\t/**\n\t * Makes a future retryable.\n\t * @param {Function} futureSupplier The function that returns a new instance of the wrapped future.\n\t * @param {Numeric} maxAttempts The maximum number of attempts.\n\t * @param {Function} waitTimeSupplier The function that calculates the amount of time to wait after a failure.\n\t * @returns {Promise} A promise that is resolved when the future succeeds or the maximum number of attempts have failed.\n\t */\n\tmakeRetryable: (futureSupplier, maxAttempts, waitTimeSupplier) => {\n\t\tlet numRemainingAttempts = maxAttempts;\n\t\tconst step = (resolve, reject) => {\n\t\t\t--numRemainingAttempts;\n\t\t\tfutureSupplier()\n\t\t\t\t.then(o => {\n\t\t\t\t\tresolve(o);\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (0 === numRemainingAttempts) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst waitTime = waitTimeSupplier(maxAttempts - numRemainingAttempts, err);\n\t\t\t\t\tsetTimeout(() => { step(resolve, reject); }, waitTime);\n\t\t\t\t});\n\t\t};\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tstep(resolve, reject);\n\t\t});\n\t}\n};\n\nmodule.exports = future;\n"]}