{"version":3,"sources":["../../src/utils/arrayUtils.js"],"names":["arrayUtils","uint8View","ArrayBuffer","input","constructor","Uint8Array","Error","copy","dest","src","numElementsToCopy","destOffset","srcOffset","length","undefined","i","isZero","array","every","value","deepEqual","lhs","rhs","numElementsToCompare","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA,IAAMA,aAAa;AAClB;;;;;AAKAC,YAAW,0BAAS;AACnB,MAAIC,gBAAgBC,MAAMC,WAA1B,EACC,OAAO,IAAIC,UAAJ,CAAeF,KAAf,CAAP,CADD,CAC+B;AAD/B,OAEK,IAAIE,eAAeF,MAAMC,WAAzB,EACJ,OAAOD,KAAP;;AAED,QAAMG,MAAM,sCAAN,CAAN;AACA,EAbiB;;AAelB;;;;;;;;AAQAC,OAAM,cAACC,IAAD,EAAOC,GAAP,EAAYC,iBAAZ,EAAiE;AAAA,MAAlCC,UAAkC,uEAArB,CAAqB;AAAA,MAAlBC,SAAkB,uEAAN,CAAM;;AACtE,MAAMC,SAASC,cAAcJ,iBAAd,GAAkCF,KAAKK,MAAvC,GAAgDH,iBAA/D;AACA,OAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4B,EAAEE,CAA9B;AACCP,QAAKG,aAAaI,CAAlB,IAAuBN,IAAIG,YAAYG,CAAhB,CAAvB;AADD;AAEA,EA3BiB;;AA6BlB;;;;;AAKAC,SAAQ;AAAA,SAASC,MAAMC,KAAN,CAAY;AAAA,UAAS,MAAMC,KAAf;AAAA,GAAZ,CAAT;AAAA,EAlCU;;AAoClB;;;;;;;AAOAC,YAAW,mBAACC,GAAD,EAAMC,GAAN,EAAWC,oBAAX,EAAoC;AAC9C,MAAIV,SAASU,oBAAb;AACA,MAAIT,cAAcD,MAAlB,EAA0B;AACzB,OAAIQ,IAAIR,MAAJ,KAAeS,IAAIT,MAAvB,EACC,OAAO,KAAP;;AAEEA,SAJsB,GAIXQ,GAJW,CAItBR,MAJsB;AAKzB;;AAED,MAAIA,SAASQ,IAAIR,MAAb,IAAuBA,SAASS,IAAIT,MAAxC,EACC,OAAO,KAAP;;AAED,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4B,EAAEE,CAA9B,EAAiC;AAChC,OAAIM,IAAIN,CAAJ,MAAWO,IAAIP,CAAJ,CAAf,EACC,OAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACA;AA7DiB,CAAnB;;AAgEAS,OAAOC,OAAP,GAAiBzB,UAAjB","file":"arrayUtils.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module utils/array */\n\nconst arrayUtils = {\n\t/**\n\t * Creates a Uint8Array view on top of input.\n\t * @param {ArrayBuffer|Uint8Array} input The input array.\n\t * @returns {Uint8Array} A Uint8Array view on top of input.\n\t */\n\tuint8View: input => {\n\t\tif (ArrayBuffer === input.constructor)\n\t\t\treturn new Uint8Array(input); // note that wrapping an ArrayBuffer in an Uint8Array does not make a copy\n\t\telse if (Uint8Array === input.constructor)\n\t\t\treturn input;\n\n\t\tthrow Error('unsupported type passed to uint8View');\n\t},\n\n\t/**\n\t * Copies elements from a source array to a destination array.\n\t * @param {Array} dest The destination array.\n\t * @param {Array} src The source array.\n\t * @param {numeric} [numElementsToCopy=undefined] The number of elements to copy.\n\t * @param {numeric} [destOffset=0] The first index of the destination to write.\n\t * @param {numeric} [srcOffset=0] The first index of the source to read.\n\t */\n\tcopy: (dest, src, numElementsToCopy, destOffset = 0, srcOffset = 0) => {\n\t\tconst length = undefined === numElementsToCopy ? dest.length : numElementsToCopy;\n\t\tfor (let i = 0; i < length; ++i)\n\t\t\tdest[destOffset + i] = src[srcOffset + i];\n\t},\n\n\t/**\n\t * Determines whether or not an array is zero-filled.\n\t * @param {Array} array The array to check.\n\t * @returns {boolean} true if the array is zero-filled, false otherwise.\n\t */\n\tisZero: array => array.every(value => 0 === value),\n\n\t/**\n\t * Deeply checks the equality of two arrays.\n\t * @param {Array} lhs First array to compare.\n\t * @param {Array} rhs Second array to compare.\n\t * @param {numeric} [numElementsToCompare=undefined] The number of elements to compare.\n\t * @returns {boolean} true if all compared elements are equal, false otherwise.\n\t */\n\tdeepEqual: (lhs, rhs, numElementsToCompare) => {\n\t\tlet length = numElementsToCompare;\n\t\tif (undefined === length) {\n\t\t\tif (lhs.length !== rhs.length)\n\t\t\t\treturn false;\n\n\t\t\t({ length } = lhs);\n\t\t}\n\n\t\tif (length > lhs.length || length > rhs.length)\n\t\t\treturn false;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (lhs[i] !== rhs[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n};\n\nmodule.exports = arrayUtils;\n"]}