{"version":3,"sources":["../../src/plugins/aggregate.js"],"names":["EntityType","require","ModelType","embeddedEntityCodec","sizes","SerializedSizeCalculator","constants","Object","assign","aggregate","embedded","cosignature","signer","signature","createSubTransactionCodec","getTxCodec","txCodec","txCodecs","type","Error","serializeAll","transaction","serializer","codecs","forEach","codec","serialize","subTxCodec","size","sizeCalculator","deserialize","parser","uint32","entity","writeUint32","requireCodecs","undefined","aggregatePlugin","registerSchema","aggregateSchema","transactions","array","schemaName","cosignatures","builder","addTransactionSupport","aggregateComplete","aggregateBonded","addSchema","binary","parentHash","registerCodecs","aggregateBuilder","payloadSize","processedSize","subTransaction","push","numCosignatures","i","buffer","map","transactionWithMetadata","subTransactionSizes","subTransactionSize","writeBuffer","codecBuilder","module","exports"],"mappings":"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","file":"aggregate.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/aggregate */\nconst EntityType = require('../model/EntityType');\nconst ModelType = require('../model/ModelType');\nconst embeddedEntityCodec = require('../modelBinary/embeddedEntityCodec');\nconst sizes = require('../modelBinary/sizes');\nconst SerializedSizeCalculator = require('../serializer/SerializedSizeCalculator');\n\nconst constants = { sizes: {} };\nObject.assign(constants.sizes, sizes, {\n\taggregate: 120 + 4, // size passed into deserialize includes full transaction size (even previously processed parts)\n\tembedded: 40,\n\tcosignature: sizes.signer + sizes.signature\n});\n\nconst createSubTransactionCodec = txCodecs => {\n\tconst getTxCodec = type => {\n\t\t// unlike in block case (handled by ModelCodecBuilder), don't fallback to unknown transaction type\n\t\tconst txCodec = txCodecs[type];\n\t\tif (!txCodec)\n\t\t\tthrow Error(`error unsupported transaction type (${type}) in aggregate`);\n\n\t\treturn txCodec;\n\t};\n\n\tconst serializeAll = (transaction, serializer) => {\n\t\tconst codecs = [embeddedEntityCodec, getTxCodec(transaction.type)];\n\t\tcodecs.forEach(codec => {\n\t\t\tcodec.serialize(transaction, serializer);\n\t\t});\n\t};\n\n\t// notice that the subTxCodec is not conformant and is slightly different from other codecs\n\tconst subTxCodec = {\n\t\tsize: transaction => {\n\t\t\tconst sizeCalculator = new SerializedSizeCalculator();\n\t\t\tserializeAll(transaction, sizeCalculator);\n\t\t\treturn sizeCalculator.size() + 4; // include size of size field itself\n\t\t},\n\n\t\tdeserialize: parser => {\n\t\t\tconst size = parser.uint32();\n\t\t\tconst entity = embeddedEntityCodec.deserialize(parser);\n\n\t\t\tconst txCodec = getTxCodec(entity.type);\n\t\t\tObject.assign(entity, txCodec.deserialize(parser));\n\t\t\treturn { size, entity };\n\t\t},\n\n\t\tserialize: (transaction, serializer, size) => {\n\t\t\tserializer.writeUint32(size);\n\t\t\tserializeAll(transaction, serializer);\n\t\t}\n\t};\n\n\treturn subTxCodec;\n};\n\nconst requireCodecs = txCodecs => {\n\t// this check causes rejection of embedded aggregates because aggregate codec intentionally does not forward tx codecs to\n\t// sub transaction codecs\n\tif (undefined === txCodecs)\n\t\tthrow Error('aggregate transaction is not embeddable');\n};\n\n/**\n * Creates an aggregate plugin.\n * @type {module:plugins/CatapultPlugin}\n */\nconst aggregatePlugin = {\n\tregisterSchema: builder => {\n\t\tconst aggregateSchema = {\n\t\t\ttransactions: { type: ModelType.array, schemaName: 'transactionWithMetadata' },\n\t\t\tcosignatures: { type: ModelType.array, schemaName: 'aggregate.cosignature' }\n\t\t};\n\n\t\tbuilder.addTransactionSupport(EntityType.aggregateComplete, aggregateSchema);\n\t\tbuilder.addTransactionSupport(EntityType.aggregateBonded, aggregateSchema);\n\n\t\tbuilder.addSchema('aggregate.cosignature', {\n\t\t\tsigner: ModelType.binary,\n\t\t\tsignature: ModelType.binary,\n\t\t\tparentHash: ModelType.binary\n\t\t});\n\t},\n\n\tregisterCodecs: codecBuilder => {\n\t\tconst aggregateBuilder = {\n\t\t\tdeserialize: (parser, size, txCodecs) => {\n\t\t\t\trequireCodecs(txCodecs);\n\n\t\t\t\tif (size < constants.sizes.aggregate)\n\t\t\t\t\tthrow Error('aggregate must contain complete aggregate header');\n\n\t\t\t\tconst payloadSize = parser.uint32();\n\t\t\t\tif (size < payloadSize + constants.sizes.aggregate)\n\t\t\t\t\tthrow Error('aggregate must contain complete payload');\n\n\t\t\t\t// 1. deserialize transactions\n\t\t\t\tconst transaction = {};\n\t\t\t\tif (0 < payloadSize) {\n\t\t\t\t\ttransaction.transactions = [];\n\n\t\t\t\t\tconst txCodec = createSubTransactionCodec(txCodecs);\n\t\t\t\t\tlet processedSize = 0;\n\t\t\t\t\twhile (processedSize < payloadSize) {\n\t\t\t\t\t\tconst subTransaction = txCodec.deserialize(parser);\n\t\t\t\t\t\ttransaction.transactions.push({ transaction: subTransaction.entity });\n\t\t\t\t\t\tprocessedSize += subTransaction.size;\n\n\t\t\t\t\t\tif (subTransaction.size < constants.sizes.embedded)\n\t\t\t\t\t\t\tthrow Error('sub transaction must contain complete transaction header');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// 2. deserialize cosignatures\n\t\t\t\tconst numCosignatures = (size - payloadSize - constants.sizes.aggregate) / constants.sizes.cosignature;\n\t\t\t\tif (numCosignatures !== (numCosignatures | 0))\n\t\t\t\t\tthrow Error('aggregate cannot have partial cosignatures');\n\n\t\t\t\tif (0 < numCosignatures) {\n\t\t\t\t\ttransaction.cosignatures = [];\n\t\t\t\t\tfor (let i = 0; i < numCosignatures; ++i) {\n\t\t\t\t\t\tconst cosignature = {};\n\t\t\t\t\t\tcosignature.signer = parser.buffer(constants.sizes.signer);\n\t\t\t\t\t\tcosignature.signature = parser.buffer(constants.sizes.signature);\n\t\t\t\t\t\ttransaction.cosignatures.push(cosignature);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer, txCodecs) => {\n\t\t\t\trequireCodecs(txCodecs);\n\n\t\t\t\t// 1. calculate payload size\n\t\t\t\tconst txCodec = createSubTransactionCodec(txCodecs);\n\n\t\t\t\t// notice that inner tx metadata is not serialized because it is derivable\n\t\t\t\tconst transactions = (transaction.transactions || []).map(transactionWithMetadata => transactionWithMetadata.transaction);\n\t\t\t\tconst subTransactionSizes = [];\n\n\t\t\t\tlet payloadSize = 0;\n\t\t\t\ttransactions.forEach(subTransaction => {\n\t\t\t\t\tconst subTransactionSize = txCodec.size(subTransaction);\n\t\t\t\t\tsubTransactionSizes.push(subTransactionSize);\n\t\t\t\t\tpayloadSize += subTransactionSize;\n\t\t\t\t});\n\n\t\t\t\tserializer.writeUint32(payloadSize);\n\n\t\t\t\t// 2. serialize transactions\n\t\t\t\tlet i = 0;\n\t\t\t\ttransactions.forEach(subTransaction => {\n\t\t\t\t\ttxCodec.serialize(subTransaction, serializer, subTransactionSizes[i++]);\n\t\t\t\t});\n\n\t\t\t\t// 3. serialize cosignatures\n\t\t\t\tif (transaction.cosignatures) {\n\t\t\t\t\ttransaction.cosignatures.forEach(cosignature => {\n\t\t\t\t\t\tserializer.writeBuffer(cosignature.signer);\n\t\t\t\t\t\tserializer.writeBuffer(cosignature.signature);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tcodecBuilder.addTransactionSupport(EntityType.aggregateComplete, aggregateBuilder);\n\t\tcodecBuilder.addTransactionSupport(EntityType.aggregateBonded, aggregateBuilder);\n\t}\n};\n\nmodule.exports = aggregatePlugin;\n"]}