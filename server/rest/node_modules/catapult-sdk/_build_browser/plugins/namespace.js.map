{"version":3,"sources":["../../src/plugins/namespace.js"],"names":["EntityType","require","ModelType","uint64","isNamespaceTypeRoot","namespaceType","parseString","parser","size","buffer","toString","writeString","serializer","str","writeBuffer","Buffer","from","namespacePlugin","registerSchema","builder","addTransactionSupport","registerNamespace","namespaceId","parentId","duration","name","string","mosaicDefinition","mosaicId","properties","type","array","schemaName","addSchema","value","mosaicSupplyChange","delta","meta","object","mosaic","supply","height","owner","binary","namespace","level0","level1","level2","ownerAddress","startHeight","endHeight","registerCodecs","codecBuilder","deserialize","transaction","uint8","namespaceNameSize","serialize","writeUint8","writeUint64","length","numRequiredProperties","mosaicNameSize","propertiesCount","i","push","key","fromUint","Error","property","compact","direction","module","exports"],"mappings":"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","file":"namespace.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/namespace */\nconst EntityType = require('../model/EntityType');\nconst ModelType = require('../model/ModelType');\nconst uint64 = require('../utils/uint64');\n\nconst isNamespaceTypeRoot = namespaceType => 0 === namespaceType;\n\nconst parseString = (parser, size) => parser.buffer(size).toString('ascii');\n\nconst writeString = (serializer, str) => { serializer.writeBuffer(Buffer.from(str, 'ascii')); };\n\n/**\n * Creates a namespace plugin.\n * @type {module:plugins/CatapultPlugin}\n */\nconst namespacePlugin = {\n\tregisterSchema: builder => {\n\t\tbuilder.addTransactionSupport(EntityType.registerNamespace, {\n\t\t\tnamespaceId: ModelType.uint64,\n\t\t\tparentId: ModelType.uint64,\n\t\t\tduration: ModelType.uint64,\n\t\t\tname: ModelType.string\n\t\t});\n\n\t\tbuilder.addTransactionSupport(EntityType.mosaicDefinition, {\n\t\t\tmosaicId: ModelType.uint64,\n\t\t\tparentId: ModelType.uint64,\n\t\t\tname: ModelType.string,\n\t\t\tproperties: { type: ModelType.array, schemaName: 'mosaicDefinition.mosaicProperty' }\n\t\t});\n\t\tbuilder.addSchema('mosaicDefinition.mosaicProperty', {\n\t\t\tvalue: ModelType.uint64\n\t\t});\n\n\t\tbuilder.addTransactionSupport(EntityType.mosaicSupplyChange, {\n\t\t\tmosaicId: ModelType.uint64,\n\t\t\tdelta: ModelType.uint64\n\t\t});\n\n\t\tbuilder.addSchema('mosaicDescriptor', {\n\t\t\tmeta: { type: ModelType.object, schemaName: 'transactionMetadata' },\n\t\t\tmosaic: { type: ModelType.object, schemaName: 'mosaicDescriptor.mosaic' }\n\t\t});\n\t\tbuilder.addSchema('mosaicDescriptor.mosaic', {\n\t\t\tnamespaceId: ModelType.uint64,\n\t\t\tmosaicId: ModelType.uint64,\n\t\t\tsupply: ModelType.uint64,\n\n\t\t\theight: ModelType.uint64,\n\t\t\towner: ModelType.binary,\n\t\t\tproperties: { type: ModelType.array, schemaName: ModelType.uint64 }\n\t\t});\n\n\t\tbuilder.addSchema('namespaceDescriptor', {\n\t\t\tmeta: { type: ModelType.object, schemaName: 'transactionMetadata' },\n\t\t\tnamespace: { type: ModelType.object, schemaName: 'namespaceDescriptor.namespace' }\n\t\t});\n\t\tbuilder.addSchema('namespaceDescriptor.namespace', {\n\t\t\tlevel0: ModelType.uint64,\n\t\t\tlevel1: ModelType.uint64,\n\t\t\tlevel2: ModelType.uint64,\n\n\t\t\tparentId: ModelType.uint64,\n\t\t\towner: ModelType.binary,\n\t\t\townerAddress: ModelType.binary,\n\n\t\t\tstartHeight: ModelType.uint64,\n\t\t\tendHeight: ModelType.uint64\n\t\t});\n\n\t\tbuilder.addSchema('mosaicNameTuple', {\n\t\t\tmosaicId: ModelType.uint64,\n\t\t\tname: ModelType.string,\n\t\t\tparentId: ModelType.uint64\n\t\t});\n\t\tbuilder.addSchema('namespaceNameTuple', {\n\t\t\tnamespaceId: ModelType.uint64,\n\t\t\tname: ModelType.string,\n\t\t\tparentId: ModelType.uint64\n\t\t});\n\t},\n\n\tregisterCodecs: codecBuilder => {\n\t\tcodecBuilder.addTransactionSupport(EntityType.registerNamespace, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.namespaceType = parser.uint8();\n\t\t\t\ttransaction[isNamespaceTypeRoot(transaction.namespaceType) ? 'duration' : 'parentId'] = parser.uint64();\n\t\t\t\ttransaction.namespaceId = parser.uint64();\n\n\t\t\t\tconst namespaceNameSize = parser.uint8();\n\t\t\t\ttransaction.name = parseString(parser, namespaceNameSize);\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeUint8(transaction.namespaceType);\n\t\t\t\tserializer.writeUint64(isNamespaceTypeRoot(transaction.namespaceType) ? transaction.duration : transaction.parentId);\n\t\t\t\tserializer.writeUint64(transaction.namespaceId);\n\n\t\t\t\tserializer.writeUint8(transaction.name.length);\n\t\t\t\twriteString(serializer, transaction.name);\n\t\t\t}\n\t\t});\n\n\t\tconst numRequiredProperties = 2; // flags and divisibility\n\t\tcodecBuilder.addTransactionSupport(EntityType.mosaicDefinition, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.parentId = parser.uint64();\n\t\t\t\ttransaction.mosaicId = parser.uint64();\n\n\t\t\t\tconst mosaicNameSize = parser.uint8();\n\t\t\t\tconst propertiesCount = parser.uint8();\n\n\t\t\t\ttransaction.properties = [];\n\t\t\t\tfor (let i = 0; i < numRequiredProperties; ++i)\n\t\t\t\t\ttransaction.properties.push({ key: i, value: uint64.fromUint(parser.uint8()) });\n\n\t\t\t\ttransaction.name = parseString(parser, mosaicNameSize);\n\n\t\t\t\tif (0 < propertiesCount) {\n\t\t\t\t\tfor (let i = 0; i < propertiesCount; ++i) {\n\t\t\t\t\t\tconst key = parser.uint8();\n\t\t\t\t\t\tconst value = parser.uint64();\n\t\t\t\t\t\ttransaction.properties.push({ key, value });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeUint64(transaction.parentId);\n\t\t\t\tserializer.writeUint64(transaction.mosaicId);\n\n\t\t\t\tserializer.writeUint8(transaction.name.length);\n\n\t\t\t\tconst propertiesCount = transaction.properties.length - numRequiredProperties;\n\t\t\t\tif (0 > propertiesCount)\n\t\t\t\t\tthrow Error('all required properties must be specified in bag');\n\n\t\t\t\tserializer.writeUint8(propertiesCount);\n\n\t\t\t\t// notice that required property values are uint8 size\n\t\t\t\tfor (let i = 0; i < numRequiredProperties; ++i) {\n\t\t\t\t\tconst property = transaction.properties[i];\n\t\t\t\t\tif (i !== property.key)\n\t\t\t\t\t\tthrow Error(`unexpected property ${property.key} at position ${i} in bag`);\n\n\t\t\t\t\tconst value = uint64.compact(property.value);\n\t\t\t\t\tif ('number' !== typeof value || 0xFF < value)\n\t\t\t\t\t\tthrow Error(`property ${property.key} value is too large`);\n\n\t\t\t\t\tserializer.writeUint8(value);\n\t\t\t\t}\n\n\t\t\t\twriteString(serializer, transaction.name);\n\t\t\t\tfor (let i = 0; i < propertiesCount; ++i) {\n\t\t\t\t\tconst property = transaction.properties[numRequiredProperties + i];\n\t\t\t\t\tserializer.writeUint8(property.key);\n\t\t\t\t\tserializer.writeUint64(property.value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcodecBuilder.addTransactionSupport(EntityType.mosaicSupplyChange, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.mosaicId = parser.uint64();\n\t\t\t\ttransaction.direction = parser.uint8();\n\t\t\t\ttransaction.delta = parser.uint64();\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeUint64(transaction.mosaicId);\n\t\t\t\tserializer.writeUint8(transaction.direction);\n\t\t\t\tserializer.writeUint64(transaction.delta);\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = namespacePlugin;\n"]}