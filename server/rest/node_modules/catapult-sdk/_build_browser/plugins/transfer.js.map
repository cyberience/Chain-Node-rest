{"version":3,"sources":["../../src/plugins/transfer.js"],"names":["EntityType","require","ModelType","sizes","constants","transferPlugin","registerSchema","builder","addTransactionSupport","transfer","recipient","binary","message","type","object","schemaName","mosaics","array","addSchema","payload","registerCodecs","codecBuilder","deserialize","transaction","parser","buffer","addressDecoded","messageSize","uint16","numMosaics","uint8","length","id","uint64","amount","push","serialize","serializer","writeBuffer","payloadSize","writeUint16","writeUint8","forEach","writeUint64","mosaic","module","exports"],"mappings":"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","file":"transfer.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/transfer */\nconst EntityType = require('../model/EntityType');\nconst ModelType = require('../model/ModelType');\nconst sizes = require('../modelBinary/sizes');\n\nconst constants = { sizes };\n\n/**\n * Creates a transfer plugin.\n * @type {module:plugins/CatapultPlugin}\n */\nconst transferPlugin = {\n\tregisterSchema: builder => {\n\t\tbuilder.addTransactionSupport(EntityType.transfer, {\n\t\t\trecipient: ModelType.binary,\n\t\t\tmessage: { type: ModelType.object, schemaName: 'transfer.message' },\n\t\t\tmosaics: { type: ModelType.array, schemaName: 'mosaic' }\n\t\t});\n\t\tbuilder.addSchema('transfer.message', {\n\t\t\tpayload: ModelType.binary\n\t\t});\n\t},\n\n\tregisterCodecs: codecBuilder => {\n\t\tcodecBuilder.addTransactionSupport(EntityType.transfer, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.recipient = parser.buffer(constants.sizes.addressDecoded);\n\n\t\t\t\tconst messageSize = parser.uint16();\n\t\t\t\tconst numMosaics = parser.uint8();\n\n\t\t\t\tif (0 < messageSize) {\n\t\t\t\t\ttransaction.message = {};\n\t\t\t\t\ttransaction.message.type = parser.uint8();\n\t\t\t\t\ttransaction.message.payload = 1 < messageSize ? parser.buffer(messageSize - 1) : [];\n\t\t\t\t}\n\n\t\t\t\tif (0 < numMosaics) {\n\t\t\t\t\ttransaction.mosaics = [];\n\t\t\t\t\twhile (transaction.mosaics.length < numMosaics) {\n\t\t\t\t\t\tconst id = parser.uint64();\n\t\t\t\t\t\tconst amount = parser.uint64();\n\t\t\t\t\t\ttransaction.mosaics.push({ id, amount });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeBuffer(transaction.recipient);\n\n\t\t\t\tlet payloadSize = 0;\n\t\t\t\tif (transaction.message) {\n\t\t\t\t\tpayloadSize = transaction.message.payload.length;\n\t\t\t\t\tserializer.writeUint16(payloadSize + 1);\n\t\t\t\t} else {\n\t\t\t\t\tserializer.writeUint16(0);\n\t\t\t\t}\n\n\t\t\t\tconst numMosaics = transaction.mosaics ? transaction.mosaics.length : 0;\n\t\t\t\tserializer.writeUint8(numMosaics);\n\n\t\t\t\tif (transaction.message) {\n\t\t\t\t\tserializer.writeUint8(transaction.message.type);\n\n\t\t\t\t\tif (0 < payloadSize)\n\t\t\t\t\t\tserializer.writeBuffer(transaction.message.payload);\n\t\t\t\t}\n\n\t\t\t\tif (0 < numMosaics) {\n\t\t\t\t\ttransaction.mosaics.forEach(mosaic => {\n\t\t\t\t\t\tserializer.writeUint64(mosaic.id);\n\t\t\t\t\t\tserializer.writeUint64(mosaic.amount);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = transferPlugin;\n"]}