{"version":3,"sources":["../../src/plugins/multisig.js"],"names":["EntityType","require","ModelType","sizes","convert","constants","multisigPlugin","registerSchema","builder","addTransactionSupport","modifyMultisigAccount","modifications","type","array","schemaName","addSchema","cosignatoryPublicKey","binary","multisig","object","account","accountAddress","multisigAccounts","cosignatories","multisigEntries","registerCodecs","codecBuilder","deserialize","transaction","minRemovalDelta","uint8ToInt8","parser","uint8","minApprovalDelta","numModifications","length","buffer","signer","push","serialize","serializer","writeUint8","int8ToUint8","forEach","modification","writeBuffer","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,aAAaC,QAAQ,qBAAR,CAAnB;AACA,IAAMC,YAAYD,QAAQ,oBAAR,CAAlB;AACA,IAAME,QAAQF,QAAQ,sBAAR,CAAd;AACA,IAAMG,UAAUH,QAAQ,kBAAR,CAAhB;;AAEA,IAAMI,YAAY,EAAEF,YAAF,EAAlB;;AAEA;;;;AAIA,IAAMG,iBAAiB;AACtBC,iBAAgB,iCAAW;AAC1BC,UAAQC,qBAAR,CAA8BT,WAAWU,qBAAzC,EAAgE;AAC/DC,kBAAe,EAAEC,MAAMV,UAAUW,KAAlB,EAAyBC,YAAY,oCAArC;AADgD,GAAhE;AAGAN,UAAQO,SAAR,CAAkB,oCAAlB,EAAwD;AACvDC,yBAAsBd,UAAUe;AADuB,GAAxD;;AAIAT,UAAQO,SAAR,CAAkB,eAAlB,EAAmC;AAClCG,aAAU,EAAEN,MAAMV,UAAUiB,MAAlB,EAA0BL,YAAY,wBAAtC;AADwB,GAAnC;AAGAN,UAAQO,SAAR,CAAkB,wBAAlB,EAA4C;AAC3CK,YAASlB,UAAUe,MADwB;AAE3CI,mBAAgBnB,UAAUe,MAFiB;AAG3CK,qBAAkB,EAAEV,MAAMV,UAAUW,KAAlB,EAAyBC,YAAYZ,UAAUe,MAA/C,EAHyB;AAI3CM,kBAAe,EAAEX,MAAMV,UAAUW,KAAlB,EAAyBC,YAAYZ,UAAUe,MAA/C;AAJ4B,GAA5C;AAMAT,UAAQO,SAAR,CAAkB,eAAlB,EAAmC;AAClCS,oBAAiB,EAAEZ,MAAMV,UAAUW,KAAlB,EAAyBC,YAAY,eAArC;AADiB,GAAnC;AAGA,EArBqB;;AAuBtBW,iBAAgB,sCAAgB;AAC/BC,eAAajB,qBAAb,CAAmCT,WAAWU,qBAA9C,EAAqE;AACpEiB,gBAAa,6BAAU;AACtB,QAAMC,cAAc,EAApB;AACAA,gBAAYC,eAAZ,GAA8BzB,QAAQ0B,WAAR,CAAoBC,OAAOC,KAAP,EAApB,CAA9B;AACAJ,gBAAYK,gBAAZ,GAA+B7B,QAAQ0B,WAAR,CAAoBC,OAAOC,KAAP,EAApB,CAA/B;;AAEA,QAAME,mBAAmBH,OAAOC,KAAP,EAAzB;AACAJ,gBAAYjB,aAAZ,GAA4B,EAA5B;;AAEA,WAAOiB,YAAYjB,aAAZ,CAA0BwB,MAA1B,GAAmCD,gBAA1C,EAA4D;AAC3D,SAAMtB,OAAOmB,OAAOC,KAAP,EAAb;AACA,SAAMhB,uBAAuBe,OAAOK,MAAP,CAAc/B,UAAUF,KAAV,CAAgBkC,MAA9B,CAA7B;AACAT,iBAAYjB,aAAZ,CAA0B2B,IAA1B,CAA+B,EAAE1B,UAAF,EAAQI,0CAAR,EAA/B;AACA;;AAED,WAAOY,WAAP;AACA,IAhBmE;;AAkBpEW,cAAW,mBAACX,WAAD,EAAcY,UAAd,EAA6B;AACvCA,eAAWC,UAAX,CAAsBrC,QAAQsC,WAAR,CAAoBd,YAAYC,eAAhC,CAAtB;AACAW,eAAWC,UAAX,CAAsBrC,QAAQsC,WAAR,CAAoBd,YAAYK,gBAAhC,CAAtB;;AAEA,QAAMC,mBAAmBN,YAAYjB,aAAZ,CAA0BwB,MAAnD;AACAK,eAAWC,UAAX,CAAsBP,gBAAtB;;AAEAN,gBAAYjB,aAAZ,CAA0BgC,OAA1B,CAAkC,wBAAgB;AACjDH,gBAAWC,UAAX,CAAsBG,aAAahC,IAAnC;AACA4B,gBAAWK,WAAX,CAAuBD,aAAa5B,oBAApC;AACA,KAHD;AAIA;AA7BmE,GAArE;AA+BA;AAvDqB,CAAvB;;AA0DA8B,OAAOC,OAAP,GAAiBzC,cAAjB","file":"multisig.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/multisig */\nconst EntityType = require('../model/EntityType');\nconst ModelType = require('../model/ModelType');\nconst sizes = require('../modelBinary/sizes');\nconst convert = require('../utils/convert');\n\nconst constants = { sizes };\n\n/**\n * Creates a multisig plugin.\n * @type {module:plugins/CatapultPlugin}\n */\nconst multisigPlugin = {\n\tregisterSchema: builder => {\n\t\tbuilder.addTransactionSupport(EntityType.modifyMultisigAccount, {\n\t\t\tmodifications: { type: ModelType.array, schemaName: 'modifyMultisigAccount.modification' }\n\t\t});\n\t\tbuilder.addSchema('modifyMultisigAccount.modification', {\n\t\t\tcosignatoryPublicKey: ModelType.binary\n\t\t});\n\n\t\tbuilder.addSchema('multisigEntry', {\n\t\t\tmultisig: { type: ModelType.object, schemaName: 'multisigEntry.multisig' }\n\t\t});\n\t\tbuilder.addSchema('multisigEntry.multisig', {\n\t\t\taccount: ModelType.binary,\n\t\t\taccountAddress: ModelType.binary,\n\t\t\tmultisigAccounts: { type: ModelType.array, schemaName: ModelType.binary },\n\t\t\tcosignatories: { type: ModelType.array, schemaName: ModelType.binary }\n\t\t});\n\t\tbuilder.addSchema('multisigGraph', {\n\t\t\tmultisigEntries: { type: ModelType.array, schemaName: 'multisigEntry' }\n\t\t});\n\t},\n\n\tregisterCodecs: codecBuilder => {\n\t\tcodecBuilder.addTransactionSupport(EntityType.modifyMultisigAccount, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.minRemovalDelta = convert.uint8ToInt8(parser.uint8());\n\t\t\t\ttransaction.minApprovalDelta = convert.uint8ToInt8(parser.uint8());\n\n\t\t\t\tconst numModifications = parser.uint8();\n\t\t\t\ttransaction.modifications = [];\n\n\t\t\t\twhile (transaction.modifications.length < numModifications) {\n\t\t\t\t\tconst type = parser.uint8();\n\t\t\t\t\tconst cosignatoryPublicKey = parser.buffer(constants.sizes.signer);\n\t\t\t\t\ttransaction.modifications.push({ type, cosignatoryPublicKey });\n\t\t\t\t}\n\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeUint8(convert.int8ToUint8(transaction.minRemovalDelta));\n\t\t\t\tserializer.writeUint8(convert.int8ToUint8(transaction.minApprovalDelta));\n\n\t\t\t\tconst numModifications = transaction.modifications.length;\n\t\t\t\tserializer.writeUint8(numModifications);\n\n\t\t\t\ttransaction.modifications.forEach(modification => {\n\t\t\t\t\tserializer.writeUint8(modification.type);\n\t\t\t\t\tserializer.writeBuffer(modification.cosignatoryPublicKey);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = multisigPlugin;\n"]}