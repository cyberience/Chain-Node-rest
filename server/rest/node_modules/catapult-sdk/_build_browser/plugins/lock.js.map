{"version":3,"sources":["../../src/plugins/lock.js"],"names":["EntityType","require","ModelType","sizes","constants","commonLockInfoSchema","account","binary","accountAddress","mosaicId","uint64","amount","height","commonLockTransactionSchema","duration","parseLockData","parser","transaction","serializeLockData","serializer","writeUint64","lockPlugin","registerSchema","builder","addSchema","lock","type","object","schemaName","Object","assign","hash","secret","recipient","addTransactionSupport","hashLock","secretLock","secretProof","proof","registerCodecs","codecBuilder","deserialize","buffer","hash256","serialize","writeBuffer","hashAlgorithm","uint8","hash512","addressDecoded","writeUint8","proofSize","uint16","length","writeUint16","module","exports"],"mappings":"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","file":"lock.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/lock */\nconst EntityType = require('../model/EntityType');\nconst ModelType = require('../model/ModelType');\nconst sizes = require('../modelBinary/sizes');\n\nconst constants = { sizes };\n\nconst commonLockInfoSchema = {\n\taccount: ModelType.binary,\n\taccountAddress: ModelType.binary,\n\tmosaicId: ModelType.uint64,\n\tamount: ModelType.uint64,\n\theight: ModelType.uint64\n\t/* status */\n};\n\nconst commonLockTransactionSchema = {\n\tmosaicId: ModelType.uint64,\n\tamount: ModelType.uint64,\n\tduration: ModelType.uint64\n};\n\nconst parseLockData = (parser, transaction) => {\n\ttransaction.mosaicId = parser.uint64();\n\ttransaction.amount = parser.uint64();\n\ttransaction.duration = parser.uint64();\n};\n\nconst serializeLockData = (transaction, serializer) => {\n\tserializer.writeUint64(transaction.mosaicId);\n\tserializer.writeUint64(transaction.amount);\n\tserializer.writeUint64(transaction.duration);\n};\n\n/**\n * Creates a lock plugin.\n * @type {module:plugins/CatapultPlugin}\n */\nconst lockPlugin = {\n\tregisterSchema: builder => {\n\t\tbuilder.addSchema('hashLockInfo', {\n\t\t\tlock: { type: ModelType.object, schemaName: 'hashLockInfo.lock' }\n\t\t});\n\t\tbuilder.addSchema('hashLockInfo.lock', Object.assign({}, commonLockInfoSchema, {\n\t\t\thash: ModelType.binary\n\t\t}));\n\n\t\tbuilder.addSchema('secretLockInfo', {\n\t\t\tlock: { type: ModelType.object, schemaName: 'secretLockInfo.lock' }\n\t\t});\n\t\tbuilder.addSchema('secretLockInfo.lock', Object.assign({}, commonLockInfoSchema, {\n\t\t\t/* hashAlgorithm */\n\t\t\tsecret: ModelType.binary,\n\t\t\trecipient: ModelType.binary\n\t\t}));\n\n\t\tbuilder.addTransactionSupport(EntityType.hashLock, Object.assign({}, commonLockTransactionSchema, {\n\t\t\thash: ModelType.binary\n\t\t}));\n\t\tbuilder.addTransactionSupport(EntityType.secretLock, Object.assign({}, commonLockTransactionSchema, {\n\t\t\tsecret: ModelType.binary,\n\t\t\trecipient: ModelType.binary\n\t\t}));\n\t\tbuilder.addTransactionSupport(EntityType.secretProof, {\n\t\t\tsecret: ModelType.binary,\n\t\t\tproof: ModelType.binary\n\t\t});\n\t},\n\n\tregisterCodecs: codecBuilder => {\n\t\tcodecBuilder.addTransactionSupport(EntityType.hashLock, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\tparseLockData(parser, transaction);\n\n\t\t\t\ttransaction.hash = parser.buffer(constants.sizes.hash256);\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializeLockData(transaction, serializer);\n\n\t\t\t\tserializer.writeBuffer(transaction.hash);\n\t\t\t}\n\t\t});\n\n\t\tcodecBuilder.addTransactionSupport(EntityType.secretLock, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\tparseLockData(parser, transaction);\n\n\t\t\t\ttransaction.hashAlgorithm = parser.uint8();\n\t\t\t\ttransaction.secret = parser.buffer(constants.sizes.hash512);\n\t\t\t\ttransaction.recipient = parser.buffer(constants.sizes.addressDecoded);\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializeLockData(transaction, serializer);\n\n\t\t\t\tserializer.writeUint8(transaction.hashAlgorithm);\n\t\t\t\tserializer.writeBuffer(transaction.secret);\n\t\t\t\tserializer.writeBuffer(transaction.recipient);\n\t\t\t}\n\t\t});\n\n\t\tcodecBuilder.addTransactionSupport(EntityType.secretProof, {\n\t\t\tdeserialize: parser => {\n\t\t\t\tconst transaction = {};\n\t\t\t\ttransaction.hashAlgorithm = parser.uint8();\n\t\t\t\ttransaction.secret = parser.buffer(constants.sizes.hash512);\n\t\t\t\tconst proofSize = parser.uint16();\n\t\t\t\ttransaction.proof = parser.buffer(proofSize);\n\t\t\t\treturn transaction;\n\t\t\t},\n\n\t\t\tserialize: (transaction, serializer) => {\n\t\t\t\tserializer.writeUint8(transaction.hashAlgorithm);\n\t\t\t\tserializer.writeBuffer(transaction.secret);\n\t\t\t\tconst proofSize = transaction.proof.length;\n\t\t\t\tserializer.writeUint16(proofSize);\n\t\t\t\tserializer.writeBuffer(transaction.proof);\n\t\t\t}\n\t\t});\n\t}\n};\n\nmodule.exports = lockPlugin;\n"]}