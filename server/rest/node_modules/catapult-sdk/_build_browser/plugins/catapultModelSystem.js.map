{"version":3,"sources":["../../src/plugins/catapultModelSystem.js"],"names":["aggregate","require","lock","multisig","namespace","transfer","ModelFormatterBuilder","ModelSchemaBuilder","ModelCodecBuilder","plugins","catapultModelSystem","supportedPluginNames","Object","keys","configure","pluginNames","namedFormattingRules","schemaBuilder","codecBuilder","formatterBuilder","forEach","pluginName","Error","plugin","registerSchema","addTransactionSupport","transactionType","schema","addFormatter","typeToName","addSchema","name","registerCodecs","modelSchema","build","formatters","key","codec","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;AACA,IAAMC,OAAOD,QAAQ,QAAR,CAAb;AACA,IAAME,WAAWF,QAAQ,YAAR,CAAjB;AACA,IAAMG,YAAYH,QAAQ,aAAR,CAAlB;AACA,IAAMI,WAAWJ,QAAQ,YAAR,CAAjB;AACA,IAAMK,wBAAwBL,QAAQ,gCAAR,CAA9B;AACA,IAAMM,qBAAqBN,QAAQ,6BAAR,CAA3B;AACA,IAAMO,oBAAoBP,QAAQ,kCAAR,CAA1B;;AAEA,IAAMQ,UAAU;AACfT,qBADe,EACJE,UADI,EACEC,kBADF,EACYC,oBADZ,EACuBC;AADvB,CAAhB;;AAIA;;;;;;AAMA,IAAMK,sBAAsB;AAC3B;;;;AAIAC,uBAAsB;AAAA,SAAMC,OAAOC,IAAP,CAAYJ,OAAZ,CAAN;AAAA,EALK;;AAO3B;;;;;;AAMAK,YAAW,mBAACC,WAAD,EAAcC,oBAAd,EAAuC;AACjD,MAAMC,gBAAgB,IAAIV,kBAAJ,EAAtB;AACA,MAAMW,eAAe,IAAIV,iBAAJ,EAArB;AACA,MAAMW,mBAAmB,IAAIb,qBAAJ,EAAzB;AACAS,cAAYK,OAAZ,CAAoB,sBAAc;AACjC,OAAI,CAACX,QAAQY,UAAR,CAAL,EACC,MAAMC,oBAAiBD,UAAjB,sCAAN;;AAED,OAAME,SAASd,QAAQY,UAAR,CAAf;AACAE,UAAOC,cAAP,CAAsB;AACrBC,2BAAuB,+BAACC,eAAD,EAAkBC,MAAlB,EAA6B;AACnDV,mBAAcQ,qBAAd,CAAoCC,eAApC,EAAqDC,MAArD;AACAR,sBAAiBS,YAAjB,CAA8BX,cAAcY,UAAd,CAAyBH,eAAzB,CAA9B;AACA,KAJoB;AAKrBI,eAAW,mBAACC,IAAD,EAAOJ,MAAP,EAAkB;AAC5BV,mBAAca,SAAd,CAAwBC,IAAxB,EAA8BJ,MAA9B;AACAR,sBAAiBS,YAAjB,CAA8BG,IAA9B;AACA;AARoB,IAAtB;AAUAR,UAAOS,cAAP,CAAsBd,YAAtB;AACA,GAhBD;;AAkBA,MAAMe,cAAchB,cAAciB,KAAd,EAApB;AACA,MAAMC,aAAa,EAAnB;AACAvB,SAAOC,IAAP,CAAYG,oBAAZ,EAAkCI,OAAlC,CAA0C,eAAO;AAChDe,cAAWC,GAAX,IAAkBjB,iBAAiBe,KAAjB,CAAuBD,WAAvB,EAAoCjB,qBAAqBoB,GAArB,CAApC,CAAlB;AACA,GAFD;;AAIA,SAAO;AACNT,WAAQM,WADF;AAENI,UAAOnB,aAAagB,KAAb,EAFD;AAGNC;AAHM,GAAP;AAKA;AA9C0B,CAA5B;;AAiDAG,OAAOC,OAAP,GAAiB7B,mBAAjB","file":"catapultModelSystem.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module plugins/catapultModelSystem */\nconst aggregate = require('./aggregate');\nconst lock = require('./lock');\nconst multisig = require('./multisig');\nconst namespace = require('./namespace');\nconst transfer = require('./transfer');\nconst ModelFormatterBuilder = require('../model/ModelFormatterBuilder');\nconst ModelSchemaBuilder = require('../model/ModelSchemaBuilder');\nconst ModelCodecBuilder = require('../modelBinary/ModelCodecBuilder');\n\nconst plugins = {\n\taggregate, lock, multisig, namespace, transfer\n};\n\n/**\n * A complete catapult model system.\n * @class CatapultModelSystem\n *\n * @property {object} schema The complete schema information.\n */\nconst catapultModelSystem = {\n\t/**\n\t * Gets the names of all supported plugins.\n\t * @returns {array<string>} The names of all supported plugins.\n\t */\n\tsupportedPluginNames: () => Object.keys(plugins),\n\n\t/**\n\t * Builds a catapult model system with the specified extensions.\n\t * @param {array} pluginNames The additional extensions to use.\n\t * @param {object} namedFormattingRules A dictionary containing named sets of formatting rules.\n\t * @returns {module:plugins/catapultModelSystem} The configured catapult model system.\n\t */\n\tconfigure: (pluginNames, namedFormattingRules) => {\n\t\tconst schemaBuilder = new ModelSchemaBuilder();\n\t\tconst codecBuilder = new ModelCodecBuilder();\n\t\tconst formatterBuilder = new ModelFormatterBuilder();\n\t\tpluginNames.forEach(pluginName => {\n\t\t\tif (!plugins[pluginName])\n\t\t\t\tthrow Error(`plugin '${pluginName}' not supported by model system`);\n\n\t\t\tconst plugin = plugins[pluginName];\n\t\t\tplugin.registerSchema({\n\t\t\t\taddTransactionSupport: (transactionType, schema) => {\n\t\t\t\t\tschemaBuilder.addTransactionSupport(transactionType, schema);\n\t\t\t\t\tformatterBuilder.addFormatter(schemaBuilder.typeToName(transactionType));\n\t\t\t\t},\n\t\t\t\taddSchema: (name, schema) => {\n\t\t\t\t\tschemaBuilder.addSchema(name, schema);\n\t\t\t\t\tformatterBuilder.addFormatter(name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tplugin.registerCodecs(codecBuilder);\n\t\t});\n\n\t\tconst modelSchema = schemaBuilder.build();\n\t\tconst formatters = {};\n\t\tObject.keys(namedFormattingRules).forEach(key => {\n\t\t\tformatters[key] = formatterBuilder.build(modelSchema, namedFormattingRules[key]);\n\t\t});\n\n\t\treturn {\n\t\t\tschema: modelSchema,\n\t\t\tcodec: codecBuilder.build(),\n\t\t\tformatters\n\t\t};\n\t}\n};\n\nmodule.exports = catapultModelSystem;\n"]}