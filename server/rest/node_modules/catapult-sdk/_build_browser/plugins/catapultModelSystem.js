'use strict';

/*
 * Copyright (c) 2016-present,
 * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
 *
 * This file is part of Catapult.
 *
 * Catapult is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Catapult is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @module plugins/catapultModelSystem */
var aggregate = require('./aggregate');
var lock = require('./lock');
var multisig = require('./multisig');
var namespace = require('./namespace');
var transfer = require('./transfer');
var ModelFormatterBuilder = require('../model/ModelFormatterBuilder');
var ModelSchemaBuilder = require('../model/ModelSchemaBuilder');
var ModelCodecBuilder = require('../modelBinary/ModelCodecBuilder');

var plugins = {
	aggregate: aggregate, lock: lock, multisig: multisig, namespace: namespace, transfer: transfer
};

/**
 * A complete catapult model system.
 * @class CatapultModelSystem
 *
 * @property {object} schema The complete schema information.
 */
var catapultModelSystem = {
	/**
  * Gets the names of all supported plugins.
  * @returns {array<string>} The names of all supported plugins.
  */
	supportedPluginNames: function supportedPluginNames() {
		return Object.keys(plugins);
	},

	/**
  * Builds a catapult model system with the specified extensions.
  * @param {array} pluginNames The additional extensions to use.
  * @param {object} namedFormattingRules A dictionary containing named sets of formatting rules.
  * @returns {module:plugins/catapultModelSystem} The configured catapult model system.
  */
	configure: function configure(pluginNames, namedFormattingRules) {
		var schemaBuilder = new ModelSchemaBuilder();
		var codecBuilder = new ModelCodecBuilder();
		var formatterBuilder = new ModelFormatterBuilder();
		pluginNames.forEach(function (pluginName) {
			if (!plugins[pluginName]) throw Error('plugin \'' + pluginName + '\' not supported by model system');

			var plugin = plugins[pluginName];
			plugin.registerSchema({
				addTransactionSupport: function addTransactionSupport(transactionType, schema) {
					schemaBuilder.addTransactionSupport(transactionType, schema);
					formatterBuilder.addFormatter(schemaBuilder.typeToName(transactionType));
				},
				addSchema: function addSchema(name, schema) {
					schemaBuilder.addSchema(name, schema);
					formatterBuilder.addFormatter(name);
				}
			});
			plugin.registerCodecs(codecBuilder);
		});

		var modelSchema = schemaBuilder.build();
		var formatters = {};
		Object.keys(namedFormattingRules).forEach(function (key) {
			formatters[key] = formatterBuilder.build(modelSchema, namedFormattingRules[key]);
		});

		return {
			schema: modelSchema,
			codec: codecBuilder.build(),
			formatters: formatters
		};
	}
};

module.exports = catapultModelSystem;
//# sourceMappingURL=catapultModelSystem.js.map