{"version":3,"sources":["../../src/auth/verifyPeer.js"],"names":["EventEmitter","require","challengeHandler","challengeParser","VerifyResult","AuthPacketHandler","serverSocket","clientKeyPair","serverPublicKey","securityMode","serverChallenge","undefined","hasRaisedVerifyEvent","emitter","authPacketHandlers","dispatch","packet","name","handler","handleServerChallenge","tryParse","tryParseServerChallengeRequest","handleClientChallenge","tryParseClientChallengeResponse","shift","response","generateServerChallengeResponse","slice","log","length","write","isVerified","verifyClientChallengeResponse","raiseVerified","success","failedChallenge","traits","parsedPacket","type","size","malformedData","call","message","emit","result","verifyPeer","createServerVerifier","packetHandler","verifier","process","payload","on","eventName","eventHandler","module","exports"],"mappings":"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","file":"verifyPeer.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module auth/verifyPeer */\nconst EventEmitter = require('events');\nconst challengeHandler = require('./challenge');\nconst challengeParser = require('./challengeParser');\nconst VerifyResult = require('./VerifyResult');\n\nclass AuthPacketHandler {\n\tconstructor(serverSocket, clientKeyPair, serverPublicKey) {\n\t\tthis.serverSocket = serverSocket;\n\t\tthis.clientKeyPair = clientKeyPair;\n\t\tthis.serverPublicKey = serverPublicKey;\n\t\tthis.securityMode = 1; // none (this is only mode currenty supported by upstream code)\n\n\t\tthis.serverChallenge = undefined;\n\t\tthis.hasRaisedVerifyEvent = false;\n\t\tthis.emitter = new EventEmitter();\n\n\t\t// verify handshake requires successful processing of a server challenge and a client challenge\n\t\tthis.authPacketHandlers = [\n\t\t\tpacket => this.dispatch(packet, {\n\t\t\t\tname: 'server',\n\t\t\t\thandler: this.handleServerChallenge,\n\t\t\t\ttryParse: challengeParser.tryParseServerChallengeRequest\n\t\t\t}),\n\t\t\tpacket => this.dispatch(packet, {\n\t\t\t\tname: 'client',\n\t\t\t\thandler: this.handleClientChallenge,\n\t\t\t\ttryParse: challengeParser.tryParseClientChallengeResponse\n\t\t\t})\n\t\t];\n\t}\n\n\tprocess(packet) {\n\t\tconst handler = this.authPacketHandlers.shift();\n\n\t\t// if no handlers are left, the verify handshake is complete\n\t\tif (!handler)\n\t\t\treturn;\n\n\t\thandler(packet);\n\t}\n\n\thandleServerChallenge(packet) {\n\t\tconst response = challengeHandler.generateServerChallengeResponse(packet, this.clientKeyPair, this.securityMode);\n\t\tthis.serverChallenge = response.slice(8, 8 + 64);\n\n\t\tthis.log(`writing response of length: ${response.length}`);\n\t\tthis.serverSocket.write(response);\n\t}\n\n\thandleClientChallenge(packet) {\n\t\tconst isVerified = challengeHandler.verifyClientChallengeResponse(packet, this.serverPublicKey, this.serverChallenge);\n\t\tthis.log(`client challenge verified? ${isVerified}`);\n\t\tthis.raiseVerified(isVerified ? VerifyResult.success : VerifyResult.failedChallenge);\n\t}\n\n\tdispatch(packet, traits) {\n\t\tconst parsedPacket = traits.tryParse(packet);\n\t\tif (!parsedPacket) {\n\t\t\tthis.log(`unable to parse ${traits.name} packet with type ${packet.type} and size ${packet.size}`);\n\t\t\tthis.raiseVerified(VerifyResult.malformedData);\n\t\t\treturn;\n\t\t}\n\n\t\ttraits.handler.call(this, parsedPacket);\n\t}\n\n\tlog(message) {\n\t\tthis.emitter.emit('status', message);\n\t}\n\n\traiseVerified(result) {\n\t\t// only raise the verify event once\n\t\tif (this.hasRaisedVerifyEvent)\n\t\t\treturn;\n\n\t\tthis.hasRaisedVerifyEvent = true;\n\t\tthis.emitter.emit('verify', result);\n\t}\n}\n\n/**\n * Verifies a connection with a catapult server.\n * @class Verifier\n *\n * @fires status Messages about verification progress.\n * @fires verify The verification result.\n */\n\nconst verifyPeer = {\n\t/**\n\t * Creates a server verifier for performing a verification handshake with a catapult server.\n\t * @param {net.Socket} serverSocket A socket connection to the catapult server.\n\t * @param {module:crypto/keyPair~KeyPair} clientKeyPair The key pair of the connecting client.\n\t * @param {module:crypto/keyPair~PublicKey} serverPublicKey The public key of the catapult server.\n\t * @returns {module:auth/verifyPeer~Verifier} A verifier for the specified server.\n\t */\n\tcreateServerVerifier(serverSocket, clientKeyPair, serverPublicKey) {\n\t\tconst packetHandler = new AuthPacketHandler(serverSocket, clientKeyPair, serverPublicKey);\n\t\tconst verifier = {\n\t\t\t/**\n\t\t\t * Accepts a server payload.\n\t\t\t * @param {Buffer} payload Data from the server.\n\t\t\t * @memberof module:auth/verifyPeer~Verifier\n\t\t\t * @instance\n\t\t\t */\n\t\t\thandler: payload => { packetHandler.process(payload); },\n\n\t\t\t/**\n\t\t\t * Subscribes to verifier events.\n\t\t\t * @param {string} eventName The name of the event.\n\t\t\t * @param {Function} eventHandler The function that should be called when the event is emitted.\n\t\t\t * @returns {module:auth/verifyPeer~Verifier} The verifier (for chaining).\n\t\t\t * @memberof module:auth/verifyPeer~Verifier\n\t\t\t * @instance\n\t\t\t */\n\t\t\ton: (eventName, eventHandler) => {\n\t\t\t\tpacketHandler.emitter.on(eventName, eventHandler);\n\t\t\t\treturn verifier;\n\t\t\t}\n\t\t};\n\n\t\treturn verifier;\n\t}\n};\n\nmodule.exports = verifyPeer;\n"]}