{"version":3,"sources":["../../src/auth/auth.js"],"names":["PacketParser","require","verifyPeer","VerifyResult","VerifyError","result","verifyResult","Error","auth","createAuthPromise","serverSocket","clientKeyPair","serverPublicKey","logger","Promise","resolve","reject","verifier","createServerVerifier","on","parser","onPacket","handler","data","length","push","ioError","impl","emitter","removeListener","success","verifyError","destroy","module","exports"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,eAAeC,QAAQ,wBAAR,CAArB;AACA,IAAMC,aAAaD,QAAQ,cAAR,CAAnB;AACA,IAAME,eAAeF,QAAQ,gBAAR,CAArB;;AAEA;;;;;IAIMG,W;;;AACL;;;;AAIA,sBAAYC,MAAZ,EAAoB;AAAA;;AAAA,gJACSA,MADT;;AAEnB,QAAKC,YAAL,GAAoBD,MAApB;AAFmB;AAGnB;;;EARwBE,K;;AAW1B,IAAMC,OAAO;AACZ;;;;;;;;;;;AAWAC,oBAAmB,2BAACC,YAAD,EAAeC,aAAf,EAA8BC,eAA9B;AAAA,MAA+CC,MAA/C,uEAAwD,YAAM,CAAE,CAAhE;AAAA,SAClB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChC;AACA,OAAMC,WAAWf,WAAWgB,oBAAX,CAAgCR,YAAhC,EAA8CC,aAA9C,EAA6DC,eAA7D,CAAjB;AACAK,YAASE,EAAT,CAAY,QAAZ,EAAsBN,MAAtB;;AAEA;AACA,OAAMO,SAAS,IAAIpB,YAAJ,EAAf;AACAoB,UAAOC,QAAP,CAAgBJ,SAASK,OAAzB;;AAEA;AACAZ,gBACES,EADF,CACK,MADL,EACa,gBAAQ;AACnB;AACAN,wCAAkCU,KAAKC,MAAvC;AACAJ,WAAOK,IAAP,CAAYF,IAAZ;AACA,IALF,EAMEJ,EANF,CAMK,OANL,EAMc,YAAM;AAClB;AACAH,WAAO,IAAIZ,WAAJ,CAAgBD,aAAauB,OAA7B,CAAP;AACA,IATF;;AAWAT,YAASE,EAAT,CAAY,QAAZ,EAAsB,kBAAU;AAC/B;AACAC,WAAOO,IAAP,CAAYC,OAAZ,CAAoBC,cAApB,CAAmC,QAAnC,EAA6CZ,SAASK,OAAtD;;AAEA;AACA,QAAInB,aAAa2B,OAAb,KAAyBzB,MAA7B,EAAqC;AACpCU,aAAQK,MAAR;AACA;AACA;;AAED;AACA,QAAMW,cAAc,IAAI3B,WAAJ,CAAgBC,MAAhB,CAApB;AACAW,WAAOe,WAAP;AACArB,iBAAasB,OAAb,CAAqBD,WAArB;AACA,IAdD;AAeA,GApCD,CADkB;AAAA;AAZP,CAAb;;AAoDAE,OAAOC,OAAP,GAAiB1B,IAAjB","file":"auth.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module auth/auth */\nconst PacketParser = require('../parser/PacketParser');\nconst verifyPeer = require('./verifyPeer');\nconst VerifyResult = require('./VerifyResult');\n\n/**\n * An error that indicates a failed verification handshake.\n * @property {module:auth/VerifyResult} verifyResult The result of a verify operation.\n */\nclass VerifyError extends Error {\n\t/**\n\t * Creates a new verify error.\n\t * @param {module:auth/VerifyResult} result The result of a verify operation.\n\t */\n\tconstructor(result) {\n\t\tsuper(`verify failed with ${result}`);\n\t\tthis.verifyResult = result;\n\t}\n}\n\nconst auth = {\n\t/**\n\t * Starts an authentication handshake with a catapult server.\n\t * @param {net.Socket} serverSocket A socket connection to the catapult server.\n\t * @param {module:crypto/keyPair~KeyPair} clientKeyPair The key pair of the connecting client.\n\t * @param {module:crypto/keyPair~PublicKey} serverPublicKey The public key of the catapult server.\n\t * @param {Function} [logger=empty] A logging function that is passed status messages.\n\t * @returns {Promise}\n\t * A promise that is completed when authentication completes and either resolved with a\n\t * {@link module:parser/PacketParser} on success or rejected with a\n\t * {@link module:auth/auth~VerifyError} on failure.\n\t */\n\tcreateAuthPromise: (serverSocket, clientKeyPair, serverPublicKey, logger = () => {}) =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\t// create a verifier\n\t\t\tconst verifier = verifyPeer.createServerVerifier(serverSocket, clientKeyPair, serverPublicKey);\n\t\t\tverifier.on('status', logger);\n\n\t\t\t// create a packet parser and forward packets to the verifier\n\t\t\tconst parser = new PacketParser();\n\t\t\tparser.onPacket(verifier.handler);\n\n\t\t\t// hook server socket events\n\t\t\tserverSocket\n\t\t\t\t.on('data', data => {\n\t\t\t\t\t// send socket data to the parser\n\t\t\t\t\tlogger(`received data with size ${data.length}`);\n\t\t\t\t\tparser.push(data);\n\t\t\t\t})\n\t\t\t\t.on('close', () => {\n\t\t\t\t\t// fail if the socket is closed\n\t\t\t\t\treject(new VerifyError(VerifyResult.ioError));\n\t\t\t\t});\n\n\t\t\tverifier.on('verify', result => {\n\t\t\t\t// stop forwarding packets to the verifier\n\t\t\t\tparser.impl.emitter.removeListener('packet', verifier.handler);\n\n\t\t\t\t// on success, complete the promise with the parser\n\t\t\t\tif (VerifyResult.success === result) {\n\t\t\t\t\tresolve(parser);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// otherwise, fail and reject the promise\n\t\t\t\tconst verifyError = new VerifyError(result);\n\t\t\t\treject(verifyError);\n\t\t\t\tserverSocket.destroy(verifyError);\n\t\t\t});\n\t\t})\n};\n\nmodule.exports = auth;\n"]}