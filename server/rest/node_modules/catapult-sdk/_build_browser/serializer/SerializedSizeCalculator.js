"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) 2016-present,
 * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
 *
 * This file is part of Catapult.
 *
 * Catapult is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Catapult is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @module serializer/SerializedSizeCalculator */

/**
 * Calculates serialized size using builder pattern.
 */
var SerializedSizeCalculator = function () {
	/**
  * Creates a serialized size calculator.
  */
	function SerializedSizeCalculator() {
		_classCallCheck(this, SerializedSizeCalculator);

		this.totalSize = 0;
	}

	/**
  * Gets the calculated size.
  * @returns {numeric} The calculated size.
  */


	_createClass(SerializedSizeCalculator, [{
		key: "size",
		value: function size() {
			return this.totalSize;
		}

		/**
   * Writes a uint8 to the working buffer.
   */

	}, {
		key: "writeUint8",
		value: function writeUint8() {
			++this.totalSize;
		}

		/**
   * Writes a uint16 to the working buffer.
   */

	}, {
		key: "writeUint16",
		value: function writeUint16() {
			this.totalSize += 2;
		}

		/**
   * Writes a uint32 to the working buffer.
   */

	}, {
		key: "writeUint32",
		value: function writeUint32() {
			this.totalSize += 4;
		}

		/**
   * Writes a uint64 to the working buffer.
   */

	}, {
		key: "writeUint64",
		value: function writeUint64() {
			this.totalSize += 8;
		}

		/**
   * Writes a buffer of bytes to the working buffer.
   * @param {Buffer} buffer The buffer to write.
   */

	}, {
		key: "writeBuffer",
		value: function writeBuffer(buffer) {
			this.totalSize += buffer.length;
		}
	}]);

	return SerializedSizeCalculator;
}();

module.exports = SerializedSizeCalculator;
//# sourceMappingURL=SerializedSizeCalculator.js.map