{"version":3,"sources":["../../src/serializer/SerializedSizeCalculator.js"],"names":["SerializedSizeCalculator","totalSize","buffer","length","module","exports"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;;;IAGMA,wB;AACL;;;AAGA,qCAAc;AAAA;;AACb,OAAKC,SAAL,GAAiB,CAAjB;AACA;;AAED;;;;;;;;yBAIO;AACN,UAAO,KAAKA,SAAZ;AACA;;AAED;;;;;;+BAGa;AACZ,KAAE,KAAKA,SAAP;AACA;;AAED;;;;;;gCAGc;AACb,QAAKA,SAAL,IAAkB,CAAlB;AACA;;AAED;;;;;;gCAGc;AACb,QAAKA,SAAL,IAAkB,CAAlB;AACA;;AAED;;;;;;gCAGc;AACb,QAAKA,SAAL,IAAkB,CAAlB;AACA;;AAED;;;;;;;8BAIYC,M,EAAQ;AACnB,QAAKD,SAAL,IAAkBC,OAAOC,MAAzB;AACA;;;;;;AAGFC,OAAOC,OAAP,GAAiBL,wBAAjB","file":"SerializedSizeCalculator.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module serializer/SerializedSizeCalculator */\n\n/**\n * Calculates serialized size using builder pattern.\n */\nclass SerializedSizeCalculator {\n\t/**\n\t * Creates a serialized size calculator.\n\t */\n\tconstructor() {\n\t\tthis.totalSize = 0;\n\t}\n\n\t/**\n\t * Gets the calculated size.\n\t * @returns {numeric} The calculated size.\n\t */\n\tsize() {\n\t\treturn this.totalSize;\n\t}\n\n\t/**\n\t * Writes a uint8 to the working buffer.\n\t */\n\twriteUint8() {\n\t\t++this.totalSize;\n\t}\n\n\t/**\n\t * Writes a uint16 to the working buffer.\n\t */\n\twriteUint16() {\n\t\tthis.totalSize += 2;\n\t}\n\n\t/**\n\t * Writes a uint32 to the working buffer.\n\t */\n\twriteUint32() {\n\t\tthis.totalSize += 4;\n\t}\n\n\t/**\n\t * Writes a uint64 to the working buffer.\n\t */\n\twriteUint64() {\n\t\tthis.totalSize += 8;\n\t}\n\n\t/**\n\t * Writes a buffer of bytes to the working buffer.\n\t * @param {Buffer} buffer The buffer to write.\n\t */\n\twriteBuffer(buffer) {\n\t\tthis.totalSize += buffer.length;\n\t}\n}\n\nmodule.exports = SerializedSizeCalculator;\n"]}