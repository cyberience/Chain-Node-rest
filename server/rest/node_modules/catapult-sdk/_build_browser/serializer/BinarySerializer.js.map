{"version":3,"sources":["../../src/serializer/BinarySerializer.js"],"names":["BufferContainer","size","buffer","Buffer","alloc","offset","bytesLeft","length","Error","value","requireBufferSpace","writeUInt8","writeUInt16LE","writeUInt32LE","writeUint32","forEach","writeUint8","byte","BinarySerializer","Number","isInteger","container","writeUint16","writeUint64","writeBuffer","module","exports"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;IAEMA,e;AACL,0BAAYC,IAAZ,EAAkB;AAAA;;AACjB,OAAKC,MAAL,GAAcC,OAAOC,KAAP,CAAaH,IAAb,EAAmB,CAAnB,CAAd;AACA,OAAKI,MAAL,GAAc,CAAd;AACA;;;;qCAEkBJ,I,EAAM;AACxB,OAAMK,YAAY,KAAKJ,MAAL,CAAYK,MAAZ,GAAqB,KAAKF,MAA5C;AACA,OAAIJ,OAAOK,SAAX,EACC,MAAME,2CAAyCP,IAAzC,yBAAiEK,SAAjE,uBAAN;AACD;;;6BAEUG,K,EAAO;AACjB,QAAKC,kBAAL,CAAwB,CAAxB;AACA,QAAKR,MAAL,CAAYS,UAAZ,CAAuBF,KAAvB,EAA8B,KAAKJ,MAAnC;AACA,KAAE,KAAKA,MAAP;AACA;;;8BAEWI,K,EAAO;AAClB,QAAKC,kBAAL,CAAwB,CAAxB;AACA,QAAKR,MAAL,CAAYU,aAAZ,CAA0BH,KAA1B,EAAiC,KAAKJ,MAAtC;AACA,QAAKA,MAAL,IAAe,CAAf;AACA;;;8BAEWI,K,EAAO;AAClB,QAAKC,kBAAL,CAAwB,CAAxB;AACA,QAAKR,MAAL,CAAYW,aAAZ,CAA0BJ,KAA1B,EAAiC,KAAKJ,MAAtC;AACA,QAAKA,MAAL,IAAe,CAAf;AACA;;;8BAEWI,K,EAAO;AAClB,QAAKC,kBAAL,CAAwB,CAAxB;AACA,QAAKI,WAAL,CAAiBL,MAAM,CAAN,CAAjB;AACA,QAAKK,WAAL,CAAiBL,MAAM,CAAN,CAAjB;AACA;;;8BAEWP,M,EAAQ;AAAA;;AACnB,QAAKQ,kBAAL,CAAwBR,OAAOK,MAA/B;AACAL,UAAOa,OAAP,CAAe,gBAAQ;AACtB,UAAKC,UAAL,CAAgBC,IAAhB;AACA,IAFD;AAGA;;;;;;AAGF;;;;;IAGMC,gB;AACL;;;;AAIA,2BAAYjB,IAAZ,EAAkB;AAAA;;AACjB,MAAI,CAACkB,OAAOC,SAAP,CAAiBnB,IAAjB,CAAD,IAA2B,KAAKA,IAApC,EACC,MAAMO,MAAM,qDAAN,CAAN;;AAED,OAAKa,SAAL,GAAiB,IAAIrB,eAAJ,CAAoBC,IAApB,CAAjB;AACA;;AAED;;;;;;;;+BAIa;AACZ,UAAO,KAAKoB,SAAL,CAAenB,MAAf,CAAsBK,MAA7B;AACA;;AAED;;;;;;;2BAIS;AACR,UAAO,KAAKc,SAAL,CAAenB,MAAtB;AACA;;AAED;;;;;;;6BAIWO,K,EAAO;AACjB,QAAKY,SAAL,CAAeL,UAAf,CAA0BP,KAA1B;AACA;;AAED;;;;;;;8BAIYA,K,EAAO;AAClB,QAAKY,SAAL,CAAeC,WAAf,CAA2Bb,KAA3B;AACA;;AAED;;;;;;;8BAIYA,K,EAAO;AAClB,QAAKY,SAAL,CAAeP,WAAf,CAA2BL,KAA3B;AACA;;AAED;;;;;;;8BAIYA,K,EAAO;AAClB,QAAKY,SAAL,CAAeE,WAAf,CAA2Bd,KAA3B;AACA;;AAED;;;;;;;8BAIYP,M,EAAQ;AACnB,QAAKmB,SAAL,CAAeG,WAAf,CAA2BtB,MAA3B;AACA;;;;;;AAGFuB,OAAOC,OAAP,GAAiBR,gBAAjB","file":"BinarySerializer.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module serializer/BinarySerializer */\n\nclass BufferContainer {\n\tconstructor(size) {\n\t\tthis.buffer = Buffer.alloc(size, 0);\n\t\tthis.offset = 0;\n\t}\n\n\trequireBufferSpace(size) {\n\t\tconst bytesLeft = this.buffer.length - this.offset;\n\t\tif (size > bytesLeft)\n\t\t\tthrow Error(`insufficient buffer space left (${size} bytes required, ${bytesLeft} bytes available)`);\n\t}\n\n\twriteUint8(value) {\n\t\tthis.requireBufferSpace(1);\n\t\tthis.buffer.writeUInt8(value, this.offset);\n\t\t++this.offset;\n\t}\n\n\twriteUint16(value) {\n\t\tthis.requireBufferSpace(2);\n\t\tthis.buffer.writeUInt16LE(value, this.offset);\n\t\tthis.offset += 2;\n\t}\n\n\twriteUint32(value) {\n\t\tthis.requireBufferSpace(4);\n\t\tthis.buffer.writeUInt32LE(value, this.offset);\n\t\tthis.offset += 4;\n\t}\n\n\twriteUint64(value) {\n\t\tthis.requireBufferSpace(8);\n\t\tthis.writeUint32(value[0]);\n\t\tthis.writeUint32(value[1]);\n\t}\n\n\twriteBuffer(buffer) {\n\t\tthis.requireBufferSpace(buffer.length);\n\t\tbuffer.forEach(byte => {\n\t\t\tthis.writeUint8(byte);\n\t\t});\n\t}\n}\n\n/**\n * Provides an interface for writing to a fixed size buffer.\n */\nclass BinarySerializer {\n\t/**\n\t * Creates a binary serializer.\n\t * @param {numeric} size The size of the underlying fixed size buffer.\n\t */\n\tconstructor(size) {\n\t\tif (!Number.isInteger(size) || 0 >= size)\n\t\t\tthrow Error('BinarySerializer constructor needs integer size > 0');\n\n\t\tthis.container = new BufferContainer(size);\n\t}\n\n\t/**\n\t * Gets the size of the underlying fixed size buffer.\n\t * @returns {Numeric} The size of the underlying buffer.\n\t */\n\tbufferSize() {\n\t\treturn this.container.buffer.length;\n\t}\n\n\t/**\n\t * Gets the underlying fixed size buffer.\n\t * @returns {Buffer} The underlying buffer.\n\t */\n\tbuffer() {\n\t\treturn this.container.buffer;\n\t}\n\n\t/**\n\t * Writes a uint8 to the working buffer.\n\t * @param {numeric} value The value to write.\n\t */\n\twriteUint8(value) {\n\t\tthis.container.writeUint8(value);\n\t}\n\n\t/**\n\t * Writes a uint16 to the working buffer.\n\t * @param {numeric} value The value to write.\n\t */\n\twriteUint16(value) {\n\t\tthis.container.writeUint16(value);\n\t}\n\n\t/**\n\t * Writes a uint32 to the working buffer.\n\t * @param {numeric} value The value to write.\n\t */\n\twriteUint32(value) {\n\t\tthis.container.writeUint32(value);\n\t}\n\n\t/**\n\t * Writes a uint64 to the working buffer.\n\t * @param {numeric} value The value to write.\n\t */\n\twriteUint64(value) {\n\t\tthis.container.writeUint64(value);\n\t}\n\n\t/**\n\t * Writes a buffer of bytes to the working buffer.\n\t * @param {Buffer} buffer The buffer to write.\n\t */\n\twriteBuffer(buffer) {\n\t\tthis.container.writeBuffer(buffer);\n\t}\n}\n\nmodule.exports = BinarySerializer;\n"]}