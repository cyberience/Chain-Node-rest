{"version":3,"sources":["../../src/modelBinary/embeddedEntityCodec.js"],"names":["sizes","require","constants","embeddedEntityCodec","deserialize","entity","signer","parser","buffer","version","uint16","type","serialize","serializer","writeBuffer","writeUint16","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,QAAQC,QAAQ,SAAR,CAAd;;AAEA,IAAMC,YAAY,EAAEF,YAAF,EAAlB;;AAEA,IAAMG,sBAAsB;AAC3B;;;;;AAKAC,cAAa,6BAAU;AACtB,MAAMC,SAAS,EAAf;AACAA,SAAOC,MAAP,GAAgBC,OAAOC,MAAP,CAAcN,UAAUF,KAAV,CAAgBM,MAA9B,CAAhB;AACAD,SAAOI,OAAP,GAAiBF,OAAOG,MAAP,EAAjB;AACAL,SAAOM,IAAP,GAAcJ,OAAOG,MAAP,EAAd;AACA,SAAOL,MAAP;AACA,EAZ0B;;AAc3B;;;;;AAKAO,YAAW,mBAACP,MAAD,EAASQ,UAAT,EAAwB;AAClCA,aAAWC,WAAX,CAAuBT,OAAOC,MAA9B;AACAO,aAAWE,WAAX,CAAuBV,OAAOI,OAA9B;AACAI,aAAWE,WAAX,CAAuBV,OAAOM,IAA9B;AACA;AAvB0B,CAA5B;;AA0BAK,OAAOC,OAAP,GAAiBd,mBAAjB","file":"embeddedEntityCodec.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module modelBinary/embeddedEntityCodec */\nconst sizes = require('./sizes');\n\nconst constants = { sizes };\n\nconst embeddedEntityCodec = {\n\t/**\n\t * Parses an embedded entity.\n\t * @param {object} parser The parser.\n\t * @returns {object} The parsed entity.\n\t */\n\tdeserialize: parser => {\n\t\tconst entity = {};\n\t\tentity.signer = parser.buffer(constants.sizes.signer);\n\t\tentity.version = parser.uint16();\n\t\tentity.type = parser.uint16();\n\t\treturn entity;\n\t},\n\n\t/**\n\t * Serializes an embedded entity.\n\t * @param {object} entity The entity.\n\t * @param {object} serializer The serializer.\n\t */\n\tserialize: (entity, serializer) => {\n\t\tserializer.writeBuffer(entity.signer);\n\t\tserializer.writeUint16(entity.version);\n\t\tserializer.writeUint16(entity.type);\n\t}\n};\n\nmodule.exports = embeddedEntityCodec;\n"]}