{"version":3,"sources":["../../src/modelBinary/blockHeaderCodec.js"],"names":["sizes","require","constants","blockHeaderCodec","deserialize","blockHeader","height","parser","uint64","timestamp","difficulty","previousBlockHash","buffer","hash256","blockTransactionsHash","serialize","serializer","writeUint64","writeBuffer","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,QAAQC,QAAQ,SAAR,CAAd;;AAEA,IAAMC,YAAY,EAAEF,YAAF,EAAlB;;AAEA,IAAMG,mBAAmB;AACxB;;;;;AAKAC,cAAa,6BAAU;AACtB,MAAMC,cAAc,EAApB;AACAA,cAAYC,MAAZ,GAAqBC,OAAOC,MAAP,EAArB;AACAH,cAAYI,SAAZ,GAAwBF,OAAOC,MAAP,EAAxB;AACAH,cAAYK,UAAZ,GAAyBH,OAAOC,MAAP,EAAzB;AACAH,cAAYM,iBAAZ,GAAgCJ,OAAOK,MAAP,CAAcV,UAAUF,KAAV,CAAgBa,OAA9B,CAAhC;AACAR,cAAYS,qBAAZ,GAAoCP,OAAOK,MAAP,CAAcV,UAAUF,KAAV,CAAgBa,OAA9B,CAApC;AACA,SAAOR,WAAP;AACA,EAduB;;AAgBxB;;;;;AAKAU,YAAW,mBAACV,WAAD,EAAcW,UAAd,EAA6B;AACvCA,aAAWC,WAAX,CAAuBZ,YAAYC,MAAnC;AACAU,aAAWC,WAAX,CAAuBZ,YAAYI,SAAnC;AACAO,aAAWC,WAAX,CAAuBZ,YAAYK,UAAnC;AACAM,aAAWE,WAAX,CAAuBb,YAAYM,iBAAnC;AACAK,aAAWE,WAAX,CAAuBb,YAAYS,qBAAnC;AACA;AA3BuB,CAAzB;;AA8BAK,OAAOC,OAAP,GAAiBjB,gBAAjB","file":"blockHeaderCodec.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module modelBinary/blockHeaderCodec */\nconst sizes = require('./sizes');\n\nconst constants = { sizes };\n\nconst blockHeaderCodec = {\n\t/**\n\t * Parses a block header.\n\t * @param {object} parser The parser.\n\t * @returns {object} The parsed block header.\n\t */\n\tdeserialize: parser => {\n\t\tconst blockHeader = {};\n\t\tblockHeader.height = parser.uint64();\n\t\tblockHeader.timestamp = parser.uint64();\n\t\tblockHeader.difficulty = parser.uint64();\n\t\tblockHeader.previousBlockHash = parser.buffer(constants.sizes.hash256);\n\t\tblockHeader.blockTransactionsHash = parser.buffer(constants.sizes.hash256);\n\t\treturn blockHeader;\n\t},\n\n\t/**\n\t * Serializes a block header.\n\t * @param {object} blockHeader The block header.\n\t * @param {object} serializer The serializer.\n\t */\n\tserialize: (blockHeader, serializer) => {\n\t\tserializer.writeUint64(blockHeader.height);\n\t\tserializer.writeUint64(blockHeader.timestamp);\n\t\tserializer.writeUint64(blockHeader.difficulty);\n\t\tserializer.writeBuffer(blockHeader.previousBlockHash);\n\t\tserializer.writeBuffer(blockHeader.blockTransactionsHash);\n\t}\n};\n\nmodule.exports = blockHeaderCodec;\n"]}