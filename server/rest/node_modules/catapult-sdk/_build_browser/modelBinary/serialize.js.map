{"version":3,"sources":["../../src/modelBinary/serialize.js"],"names":["BinarySerializer","require","SerializedSizeCalculator","convert","serializeToBuffer","codec","entity","calculator","serialize","serializer","size","buffer","toHex","uint8ToHex","toBuffer","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA,IAAMA,mBAAmBC,QAAQ,gCAAR,CAAzB;AACA,IAAMC,2BAA2BD,QAAQ,wCAAR,CAAjC;AACA,IAAME,UAAUF,QAAQ,kBAAR,CAAhB;;AAEA,IAAMG,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,MAAMC,aAAa,IAAIL,wBAAJ,EAAnB;AACAG,QAAMG,SAAN,CAAgBF,MAAhB,EAAwBC,UAAxB;;AAEA,MAAME,aAAa,IAAIT,gBAAJ,CAAqBO,WAAWG,IAAX,EAArB,CAAnB;AACAL,QAAMG,SAAN,CAAgBF,MAAhB,EAAwBG,UAAxB;AACA,SAAOA,WAAWE,MAAX,EAAP;AACA,CAPD;;AASA;;;AAGA,IAAMH,YAAY;AACjB;;;;;;AAMAI,SAAO,eAACP,KAAD,EAAQC,MAAR;AAAA,WAAmBH,QAAQU,UAAR,CAAmBT,kBAAkBC,KAAlB,EAAyBC,MAAzB,CAAnB,CAAnB;AAAA,GAPU;;AASjB;;;;;;AAMAQ,YAAUV;AAfO,CAAlB;;AAkBAW,OAAOC,OAAP,GAAiBR,SAAjB","file":"serialize.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/** @module modelBinary/serialize */\nconst BinarySerializer = require('../serializer/BinarySerializer');\nconst SerializedSizeCalculator = require('../serializer/SerializedSizeCalculator');\nconst convert = require('../utils/convert');\n\nconst serializeToBuffer = (codec, entity) => {\n\tconst calculator = new SerializedSizeCalculator();\n\tcodec.serialize(entity, calculator);\n\n\tconst serializer = new BinarySerializer(calculator.size());\n\tcodec.serialize(entity, serializer);\n\treturn serializer.buffer();\n};\n\n/**\n * Serializer utility functions.\n */\nconst serialize = {\n\t/**\n\t * Serializes an entity to a hex string using a codec.\n\t * @param {module:modelBinary/ModelCodec} codec The model codec.\n\t * @param {object} entity The entity to serialize.\n\t * @returns {string} A hex string representing the entity.\n\t */\n\ttoHex: (codec, entity) => convert.uint8ToHex(serializeToBuffer(codec, entity)),\n\n\t/**\n\t * Serializes an entity to a buffer using a codec.\n\t * @param {module:modelBinary/ModelCodec} codec The model codec.\n\t * @param {object} entity The entity to serialize.\n\t * @returns {Buffer} A buffer representing the entity.\n\t */\n\ttoBuffer: serializeToBuffer\n};\n\nmodule.exports = serialize;\n"]}