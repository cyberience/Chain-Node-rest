{"version":3,"sources":["../../src/modelBinary/transactionExtensions.js"],"names":["serialize","require","sizes","crypto","sha3Hasher","serializeToBuffer","codec","transaction","toBuffer","slice","transactionHeader","transactionExtensions","hash","transactionHash","Uint8Array","hasher","createHasher","reset","update","signature","signer","transactionBuffer","finalize","sign","keyPair","verify","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;AACA,IAAMC,QAAQD,QAAQ,SAAR,CAAd;AACA,IAAME,SAASF,QAAQ,mBAAR,CAAf;AACA,IAAMG,aAAaH,QAAQ,sBAAR,CAAnB;;AAEA;AACA,IAAMI,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,WAAR;AAAA,QAAwBP,UAAUQ,QAAV,CAAmBF,KAAnB,EAA0BC,WAA1B,EAAuCE,KAAvC,CAA6CP,MAAMQ,iBAAnD,CAAxB;AAAA,CAA1B;;AAEA,IAAMC,wBAAwB;AAC7B;;;;;;AAMAC,OAAM,cAACN,KAAD,EAAQC,WAAR,EAAwB;AAC7B,MAAMM,kBAAkB,IAAIC,UAAJ,CAAe,EAAf,CAAxB;AACA,MAAMC,SAASX,WAAWY,YAAX,CAAwB,EAAxB,CAAf;AACAD,SAAOE,KAAP;;AAEA;AACAF,SAAOG,MAAP,CAAcX,YAAYY,SAAZ,CAAsBV,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAAd;;AAEA;AACAM,SAAOG,MAAP,CAAcX,YAAYa,MAA1B;;AAEA;AACA,MAAMC,oBAAoBhB,kBAAkBC,KAAlB,EAAyBC,WAAzB,CAA1B;AACAQ,SAAOG,MAAP,CAAcG,iBAAd;AACAN,SAAOO,QAAP,CAAgBT,eAAhB;;AAEA,SAAOA,eAAP;AACA,EAxB4B;;AA0B7B;;;;;;AAMAU,OAAM,cAACjB,KAAD,EAAQkB,OAAR,EAAiBjB,WAAjB,EAAiC;AACtC,MAAMc,oBAAoBhB,kBAAkBC,KAAlB,EAAyBC,WAAzB,CAA1B;AACAA,cAAYY,SAAZ,GAAwBhB,OAAOoB,IAAP,CAAYC,OAAZ,EAAqBH,iBAArB,CAAxB;AACA,EAnC4B;;AAqC7B;;;;;;AAMAI,SAAQ,gBAACnB,KAAD,EAAQC,WAAR,EAAwB;AAC/B,MAAMc,oBAAoBhB,kBAAkBC,KAAlB,EAAyBC,WAAzB,CAA1B;AACA,SAAOJ,OAAOsB,MAAP,CAAclB,YAAYa,MAA1B,EAAkCC,iBAAlC,EAAqDd,YAAYY,SAAjE,CAAP;AACA;AA9C4B,CAA9B;;AAiDAO,OAAOC,OAAP,GAAiBhB,qBAAjB","file":"transactionExtensions.js","sourcesContent":["/*\n * Copyright (c) 2016-present,\n * Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.\n *\n * This file is part of Catapult.\n *\n * Catapult is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Catapult is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Catapult.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst serialize = require('./serialize');\nconst sizes = require('./sizes');\nconst crypto = require('../crypto/keyPair');\nconst sha3Hasher = require('../crypto/sha3Hasher');\n\n// serialize.toBuffer returns a nodejs buffer that does not copy any data when slicing\nconst serializeToBuffer = (codec, transaction) => serialize.toBuffer(codec, transaction).slice(sizes.transactionHeader);\n\nconst transactionExtensions = {\n\t/**\n\t * Calculates the hash of a transaction.\n\t * @param {module:modelBinary/ModelCodec} codec The transaction codec.\n\t * @param {object} transaction The transaction to hash.\n\t * @returns {Uint8Array} The transaction hash.\n\t */\n\thash: (codec, transaction) => {\n\t\tconst transactionHash = new Uint8Array(32);\n\t\tconst hasher = sha3Hasher.createHasher(32);\n\t\thasher.reset();\n\n\t\t// \"R\"\n\t\thasher.update(transaction.signature.slice(0, 32));\n\n\t\t// pubkey\n\t\thasher.update(transaction.signer);\n\n\t\t// data\n\t\tconst transactionBuffer = serializeToBuffer(codec, transaction);\n\t\thasher.update(transactionBuffer);\n\t\thasher.finalize(transactionHash);\n\n\t\treturn transactionHash;\n\t},\n\n\t/**\n\t * Signs a transaction using a signer's private key.\n\t * @param {module:modelBinary/ModelCodec} codec The transaction codec.\n\t * @param {object} keyPair The signer's key pair.\n\t * @param {object} transaction The transaction to sign.\n\t */\n\tsign: (codec, keyPair, transaction) => {\n\t\tconst transactionBuffer = serializeToBuffer(codec, transaction);\n\t\ttransaction.signature = crypto.sign(keyPair, transactionBuffer);\n\t},\n\n\t/**\n\t * Verifies the signature of a transaction.\n\t * @param {module:modelBinary/ModelCodec} codec The transaction codec.\n\t * @param {object} transaction The transaction to verify.\n\t * @returns {boolean} true if the transaction signature is valid.\n\t */\n\tverify: (codec, transaction) => {\n\t\tconst transactionBuffer = serializeToBuffer(codec, transaction);\n\t\treturn crypto.verify(transaction.signer, transactionBuffer, transaction.signature);\n\t}\n};\n\nmodule.exports = transactionExtensions;\n"]}